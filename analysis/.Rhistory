setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)
library(ez) # version 4.4-0
library(effectsize) # version 0.4.5
library(Hmisc) # version 4.5-0
library(ppcor) # version 1.1
# load relevant functions
source("functions/loadPTKExperimentData.R")
# set some relevant setting
options(scipen = 999)
#get the preprocessed/prepared data:
#Experiment data
load(file="input/amateurs_Exp_processed.RData")
# remove participant with degree in music science
D <- subset(D,Code!="AEB56L") # instrumentalists
#PROMS Data
load(file="input/amateurs_PROMS_prepared.RData")
# rename data sets to make script easier to read
PROMS <- PROMS2
rm(PROMS2)
## PROMS
PROMS <- PROMS[, c(1:3, 12)]  # Use Confidence Rating
#PROMS <- PROMS[, c(1:3, 16)]  # use for D-Prime Rating
# remove participant with degree in music science
PROMS <- subset(PROMS,Code!="AEB56L") # instrumentalists
# convert to wide format
PROMS <- PROMS %>% pivot_wider(names_from = c(Test), values_from = c(Confidence))
#PROMS <- PROMS %>% pivot_wider(names_from = c(Test), values_from = c(dprime))   # use for D-Prime Rating
PROMS$PROMS_mean <- (PROMS$melody + PROMS$pitch + PROMS$rhythm + PROMS$timbre ) /4
## Emotion recognition data
# remove avg trials
B <- D %>% filter(Emo != "avg")
# average data
B <- B %>% group_by(Code, Group, MType) %>% summarise(ACC = mean(ACC),
RT = mean(RT),
N = length(Emo))
B$N <- NULL # that was just included to check if averaging worked properly
# convert to wide format
B <- B %>% pivot_wider(names_from = c(MType), values_from = c(ACC, RT))
B$ACC_all <- (B$ACC_f0 + B$ACC_full + B$ACC_tbr)/3
B$RT_all <- (B$RT_f0 + B$RT_full + B$RT_tbr)/3
# merge the datasets
Corrdata <- merge(B, PROMS)
#save for later analysis:
save(Corrdata, file="input/amateurs_Corrdata_PROMS.RData")
rm(B,D,Corrdata,PROMS)
#Experiment data
load(file="input/amateurs_Exp_processed.RData")
# remove participant with degree in music science
D <- subset(D, Code!="AEB56L") # instrumentalist
#survey data including the Gold-MSI
load(file="input/amateurs_survey_processed.RData")
# remove participant with degree in music science
survey <- subset(survey2, Code!="AEB56L") # instrumentalist
# remove participant with degree in music science
survey <- subset(survey, Code!="AEB56L") # instrumentalist
## Gold-MSI
MSI <- survey[, c(1, 31, 26:30 )]
View(MSI)
View(survey)
## Gold-MSI
MSI <- survey[, c(1, 31, 27:31 )]
View(survey)
## Gold-MSI
MSI <- survey[, c(1, 32, 27:31 )]
View(MSI)
rm(survey)
# remove avg trials
B <- D %>% filter(Emo != "avg")
B <- B %>% group_by(Code, Group, MType) %>% summarise(ACC = mean(ACC),
RT = mean(RT),
N = length(Emo))
View(B)
B$N <- NULL # that was just included to check if averaging worked properly
B <- B %>% pivot_wider(names_from = c(MType), values_from = c(ACC, RT))
B$ACC_all <- (B$ACC_f0 + B$ACC_full + B$ACC_tbr)/3
B$RT_all <- (B$RT_f0 + B$RT_full + B$RT_tbr)/3
# merge the datasets
Corrdata <- merge(B, MSI)
#save for later analysis:
save(Corrdata, file="input/amateurs_Corrdata_MSI.RData")
rm (D,B,Corrdata,MSI)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) #version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # version 0.4.5
library(Hmisc) # version 4.5-0
library(ppcor) # version 1.1
# load relevant functions
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999)
load(file="input/amateurs_Corrdata_PROMS.RData")
names(Corrdata)
Correlations_ACC <- rcorr(as.matrix(Corrdata[,c(9, 3:5, 11:15)]), type="spearman") # calculate correlations for confidence ratings
View(Correlations_ACC)
Cor_r <- data.frame(Correlations_ACC$r[1:4, 5:9])
Cor_p <- data.frame(Correlations_ACC$P[1:4, 5:9])
Cor_n <- Correlations_ACC$n[1:1]
Cor_r$MType <- rownames(Cor_r)
Cor_p$MType <- rownames(Cor_p)
#convert to long format
Cor_r = Cor_r %>% pivot_longer(cols = melody:PROMS_mean, names_to = "Test", values_to = "r")
Cor_p = Cor_p %>% pivot_longer(cols = melody:PROMS_mean, names_to = "Test", values_to = "p")
Cor <-merge(Cor_r, Cor_p)
Cor$N <- Cor_n
rm(Cor_r, Cor_p, Cor_n)
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, PROMS_mean = "PROMS_Averaged", pitch = "Pitch", melody = "Melody", timbre = "Timbre", rhythm = "Rhythm")
Cor$Test <- factor(Cor$Test, levels = c("PROMS_Averaged", "Pitch", "Melody", "Timbre", "Rhythm"))
#perform the multiple comparison correction (Benjamini-Hochberg Correction):
#https://www.youtube.com/watch?v=rZKa4tW2NKs
FDR = 0.05  # set false discovery rate to 5%
Cor <- Cor %>% arrange(p) #order the dataset by p-value
Cor$i <- c(1:20) # assign rank of p-value
m <- 20  # assing number of tests
Cor$CritValue <- (Cor$i / m) * FDR  #(i/m)*Q  # correct the critical value
Cor$p_corrected <- Cor$p * (m / Cor$i)        # correct the p-value itself
#perform adjustment of the corrected value:
Cor$p_corrected2 <- Cor$p_corrected
for (j in (m-1):1){
Cor$p_corrected2[j] <- ifelse(Cor$p_corrected[j] > Cor$p_corrected2[j+1], Cor$p_corrected2[j+1], Cor$p_corrected[j] )
}
# save the output
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_PROMS.txt")
View(Cor)
# prepare dataset
Corrdata <- Corrdata[, -c(6,7,8,10)]
Emo <- Corrdata[, c(1:6)] %>% pivot_longer(cols = ACC_f0:ACC_all, names_to = "MType", values_to = "ACC")
PROMS <- Corrdata[, c(1,2,7:11)] %>% pivot_longer(cols = melody:PROMS_mean, names_to = "Test", values_to = "Confidence")
Data <- merge(Emo, PROMS)
rm(Emo, PROMS)
# recode factors
Data$MType <- recode(Data$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Data$MType <- factor(Data$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Data$Test <- recode(Data$Test, PROMS_mean = "PROMS_Averaged", pitch = "Pitch", melody = "Melody", timbre = "Timbre", rhythm = "Rhythm")
Data$Test <- factor(Data$Test, levels = c("PROMS_Averaged", "Pitch", "Melody", "Timbre", "Rhythm"))
Data$Group <- factor(Data$Group, levels = c("1","2"))
# format Cor
Cor$p_corrected2 <- round(Cor$p_corrected2, 3)
Cor$pplot <- paste0("= ", Cor$p_corrected2)
Cor$pplot <- ifelse(Cor$pplot == "= 0", "< 0.001", Cor$pplot)
Cor$pplot
Cor$sig <- ifelse(Cor$p_corrected2 < 0.05, "bold.italic", "plain")
title = paste0("Correlation between Emotion Classification Performance and Music Perception Abilities (N = 88)")
filename = paste0("plots/amateurs_04_correlations_ACC_PROMS_Accuracy.png")
p<-(ggplot(data= Data, aes(x = Confidence, y=ACC)) +
geom_point(aes(color = Group), shape= 18, size = 3) +
labs(x = "Music Perception Abilities (Confidence)" , y = "Emotion Classification Performance" , title = title, color = "") +       #, title = title
facet_grid(rows = vars(MType), cols = vars(Test), switch = "y") + #scales = "free"
scale_color_manual(labels = c("Singers", "Instrumentalists" ), values = c("green3", "darkgreen")) +
geom_smooth(method='lm', formula= y~x, color = "black") +
geom_text(data= Cor,
aes(label= paste0("r = ", round(r, 2), "\n p ", pplot), x = 0.1, y = 0.85, fontface = sig), color = "black") +
scale_y_continuous(position = "right") +
scale_x_continuous(limits=c(0, 0.6), breaks = c(0.2, 0.4, 0.6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="bottom",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size=14)))
ggsave(filename, width = 15, height = 12, dpi =300)
title = paste0("Correlation between Emotion Classification Performance and Music Perception Abilities (N = 88)")
filename = paste0("plots/amateurs_05_correlations_ACC_PROMS_Accuracy.png")
p<-(ggplot(data= Data, aes(x = Confidence, y=ACC)) +
geom_point(aes(color = Group), shape= 18, size = 3) +
labs(x = "Music Perception Abilities (Confidence)" , y = "Emotion Classification Performance" , title = title, color = "") +       #, title = title
facet_grid(rows = vars(MType), cols = vars(Test), switch = "y") + #scales = "free"
scale_color_manual(labels = c("Singers", "Instrumentalists" ), values = c("green3", "darkgreen")) +
geom_smooth(method='lm', formula= y~x, color = "black") +
geom_text(data= Cor,
aes(label= paste0("r = ", round(r, 2), "\n p ", pplot), x = 0.1, y = 0.85, fontface = sig), color = "black") +
scale_y_continuous(position = "right") +
scale_x_continuous(limits=c(0, 0.6), breaks = c(0.2, 0.4, 0.6)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="bottom",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size=14)))
ggsave(filename, width = 15, height = 12, dpi =300)
#reload all data
load(file="input/amateurs_Corrdata_PROMS.RData")
#clean complete environment
rm(list=ls())
#reload all data
load(file="input/amateurs_Corrdata_PROMS.RData")
#reload all data
load(file="input/amateurs_Corrdata_PROMS.RData")
PROMS <- Corrdata
load(file="input/amateurs_Corrdata_MSI.RData")
#Experiment data
load(file="input/amateurs_Exp_processed.RData")
# remove participant with degree in music science
D <- subset(D, Code!="AEB56L") # instrumentalist
#survey data including the Gold-MSI
load(file="input/amateurs_survey_processed.RData")
# remove participant with degree in music science
survey <- subset(survey, Code!="AEB56L") # instrumentalist
## Gold-MSI
MSI <- survey[, c(1, 32, 27:31 )]
rm(survey)
# remove avg trials
B <- D %>% filter(Emo != "avg")
B <- B %>% group_by(Code, Group, MType) %>% summarise(ACC = mean(ACC),
RT = mean(RT),
N = length(Emo))
B$N <- NULL # that was just included to check if averaging worked properly
B <- B %>% pivot_wider(names_from = c(MType), values_from = c(ACC, RT))
B$ACC_all <- (B$ACC_f0 + B$ACC_full + B$ACC_tbr)/3
B$RT_all <- (B$RT_f0 + B$RT_full + B$RT_tbr)/3
# merge the datasets
Corrdata <- merge(B, MSI)
#Experiment data
load(file="input/amateurs_Exp_processed.RData")
# remove participant with degree in music science
D <- subset(D, Code!="AEB56L") # instrumentalist
#survey data including the Gold-MSI
load(file="input/amateurs_survey_processed.RData")
# remove participant with degree in music science
survey <- subset(survey, Code!="AEB56L") # instrumentalist
## Gold-MSI
MSI <- survey[, c(1, 32, 27:31 )]
rm(survey)
# remove avg trials
B <- D %>% filter(Emo != "avg")
B <- B %>% group_by(Code, Group, MType) %>% summarise(ACC = mean(ACC),
RT = mean(RT),
N = length(Emo))
B$N <- NULL # that was just included to check if averaging worked properly
B <- B %>% pivot_wider(names_from = c(MType), values_from = c(ACC, RT))
B$ACC_all <- (B$ACC_f0 + B$ACC_full + B$ACC_tbr)/3
B$RT_all <- (B$RT_f0 + B$RT_full + B$RT_tbr)/3
# merge the datasets
Corrdata <- merge(B, MSI)
View(B)
View(MSI)
# remove participant with degree in music science
survey <- subset(survey, Code!="AEB56L") # instrumentalist
#Experiment data
load(file="input/amateurs_Exp_processed.RData")
# remove participant with degree in music science
D <- subset(D, Code!="AEB56L") # instrumentalist
#survey data including the Gold-MSI
load(file="input/amateurs_survey_processed.RData")
# remove participant with degree in music science
survey <- subset(survey, Code!="AEB56L") # instrumentalist
View(survey)
## Gold-MSI
MSI <- survey[, c(2, 32, 27:31 )]
rm(survey)
# remove avg trials
B <- D %>% filter(Emo != "avg")
B <- B %>% group_by(Code, Group, MType) %>% summarise(ACC = mean(ACC),
RT = mean(RT),
N = length(Emo))
B$N <- NULL # that was just included to check if averaging worked properly
B <- B %>% pivot_wider(names_from = c(MType), values_from = c(ACC, RT))
B$ACC_all <- (B$ACC_f0 + B$ACC_full + B$ACC_tbr)/3
B$RT_all <- (B$RT_f0 + B$RT_full + B$RT_tbr)/3
# merge the datasets
Corrdata <- merge(B, MSI)
#save for later analysis:
save(Corrdata, file="input/amateurs_Corrdata_MSI.RData")
rm (D,B,Corrdata,MSI)
#reload all data
load(file="input/amateurs_Corrdata_PROMS.RData")
PROMS <- Corrdata
load(file="input/amateurs_Corrdata_MSI.RData")
MSI <- Corrdata
Corrdata <- merge(PROMS, MSI)
rm(MSI, PROMS)
View(Corrdata)
#remove the Variables we are not interested in (RT):
Corrdata <- Corrdata[,-c(6:8, 10)]
View(Corrdata)
## Partial correlations:
Comb <- expand.grid(c("ACC_all", "ACC_full", "ACC_f0", "ACC_tbr"),c("PROMS_mean", "pitch", "melody", "timbre", "rhythm"))
cor_results <- Comb # create "empty" results data frame
cor_results$cor <- NA
cor_results$p <- NA
cor_results$N <- 88
for(i in 1:length(Comb$Var1)) {
#i = 2
cordat <- Corrdata %>% dplyr::select(Comb$Var1[i], Comb$Var2[i], Mean_education)
cor <- pcor(cordat, method = "spearman")  # this Correlation holds
cor_results$cor[i] <-  cor$estimate[1,2]
cor_results$p[i] <- cor$p.value[1,2]
}
Cor <- cor_results
names(Cor) <- c("MType", "Test", "Cor", "p", "N")
rm(cor, Comb, cordat, cor_results)
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, PROMS_mean = "PROMS_Averaged", pitch = "Pitch", melody = "Melody", timbre = "Timbre", rhythm = "Rhythm")
Cor$Test <- factor(Cor$Test, levels = c("PROMS_Averaged", "Pitch", "Melody", "Timbre", "Rhythm"))
#perform the multiple comparison correction:
#https://www.youtube.com/watch?v=rZKa4tW2NKs
FDR = 0.05  # set false discovery rate to 5%
Cor <- Cor %>% arrange(p) #order the dataset by p-value
Cor$i <- c(1:20) # assign rank of p-value
m <- 20  # assing number of tests
Cor$CritValue <- (Cor$i / m) * FDR  #(i/m)*Q  # correct the critical value
Cor$p_corrected <- Cor$p * (m / Cor$i)        # correct the p-value itself
#perform adjustement of the corrected value:
Cor$p_corrected2 <- Cor$p_corrected
for (j in (m-1):1){
Cor$p_corrected2[j] <- ifelse(Cor$p_corrected[j] > Cor$p_corrected[j+1], Cor$p_corrected2[j+1], Cor$p_corrected[j] )
}
# save the dataset
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_PROMS_c-Education.txt")
rm(Cor)
#reload all data
load(file="input/amateurs_Corrdata_PROMS.RData")
PROMS <- Corrdata
load(file="input/amateurs_Corrdata_MSI.RData")
MSI <- Corrdata
#merge the data
Corrdata <- merge(PROMS, MSI)
rm(MSI, PROMS)
#remove the Variables we are not interested in (RT):
Corrdata <- Corrdata[,-c(6:8, 10)]
## Partial correlations:
Comb <- expand.grid(c("ACC_all", "ACC_full", "ACC_f0", "ACC_tbr"),c("PROMS_mean", "pitch", "melody", "timbre", "rhythm"))
cor_results <- Comb # create "empty" results data frame
cor_results$cor <- NA
cor_results$p <- NA
cor_results$N <- 88
# (1) PROMS Correlations controlled for Music Education
for(i in 1:length(Comb$Var1)) {
#i = 2
cordat <- Corrdata %>% dplyr::select(Comb$Var1[i], Comb$Var2[i], Mean_education)
cor <- pcor(cordat, method = "spearman")  # this Correlation holds
cor_results$cor[i] <-  cor$estimate[1,2]
cor_results$p[i] <- cor$p.value[1,2]
}
Cor <- cor_results
names(Cor) <- c("MType", "Test", "Cor", "p", "N")
rm(cor, Comb, cordat, cor_results)
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, PROMS_mean = "PROMS_Averaged", pitch = "Pitch", melody = "Melody", timbre = "Timbre", rhythm = "Rhythm")
Cor$Test <- factor(Cor$Test, levels = c("PROMS_Averaged", "Pitch", "Melody", "Timbre", "Rhythm"))
#perform the multiple comparison correction:
#https://www.youtube.com/watch?v=rZKa4tW2NKs
FDR = 0.05  # set false discovery rate to 5%
Cor <- Cor %>% arrange(p) #order the dataset by p-value
Cor$i <- c(1:20) # assign rank of p-value
m <- 20  # assing number of tests
Cor$CritValue <- (Cor$i / m) * FDR  #(i/m)*Q  # correct the critical value
Cor$p_corrected <- Cor$p * (m / Cor$i)        # correct the p-value itself
#perform adjustement of the corrected value:
Cor$p_corrected2 <- Cor$p_corrected
for (j in (m-1):1){
Cor$p_corrected2[j] <- ifelse(Cor$p_corrected[j] > Cor$p_corrected[j+1], Cor$p_corrected2[j+1], Cor$p_corrected[j] )
}
# save the dataset
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_PROMS_c-Education.txt")
View(Cor)
View(Cor)
#clean complete environment
rm(list=ls())
load(file="input/amateurs_Corrdata_MSi.RData")
load(file="input/amateurs_Corrdata_MSI.RData")
names(Corrdata)
Correlations_ACC <- rcorr(as.matrix(Corrdata[,c(9, 3:5, 11:16)]), type="spearman") # correlate with ACC
Correlations_RT <- rcorr(as.matrix(Corrdata[,c(10, 6:8, 11:16)]), type="spearman") # correlate with RT
#clean complete environment
rm(list=ls())
Correlations_ACC <- rcorr(as.matrix(Corrdata[,c(9, 3:5, 11:16)]), type="spearman") # correlate with ACC
Cor_r <- data.frame(Correlations_ACC$r[1:4, 5:10])
load(file="input/amateurs_Corrdata_MSI.RData")
Correlations_ACC <- rcorr(as.matrix(Corrdata[,c(9, 3:5, 11:16)]), type="spearman") # correlate with ACC
Cor_r <- data.frame(Correlations_ACC$r[1:4, 5:10])
Cor_p <- data.frame(Correlations_ACC$P[1:4, 5:10])
Cor_n <- Correlations_ACC$n[1:1]
Cor_r$MType <- rownames(Cor_r)
Cor_p$MType <- rownames(Cor_p)
Cor_r = Cor_r %>% pivot_longer(cols = ME_mean:Mean_singing, names_to = "Test", values_to = "r")
Cor_p = Cor_p %>% pivot_longer(cols = ME_mean:Mean_singing, names_to = "Test", values_to = "p")
Cor <-merge(Cor_r, Cor_p)
Cor$N <- Cor_n
rm(Cor_r, Cor_p, Cor_n)
View(Corrdata)
View(Cor)
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, ME_mean = "General ME", Mean_active = "Active", Mean_perception = "Perception", Mean_singing = "Singing", Mean_emotion = "Emotion", Mean_education = "Education")
Cor$Test <- factor(Cor$Test, levels = c("General ME", "Active", "Perception", "Singing", "Emotion", "Education"))
# save the dataset
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_MSI.txt")
### prepare RT data as well:
Cor_r <- data.frame(Correlations_RT$r[1:4, 5:10])
Cor_p <- data.frame(Correlations_RT$P[1:4, 5:10])
Correlations_ACC <- rcorr(as.matrix(Corrdata[,c(9, 3:5, 11:16)]), type="spearman") # correlate with ACC
# prepare them to be saved and plotted
Cor_r <- data.frame(Correlations_ACC$r[1:4, 5:10])
Cor_p <- data.frame(Correlations_ACC$P[1:4, 5:10])
Cor_n <- Correlations_ACC$n[1:1]
Cor_r$MType <- rownames(Cor_r)
Cor_p$MType <- rownames(Cor_p)
#convert to long format
Cor_r = Cor_r %>% pivot_longer(cols = ME_mean:Mean_singing, names_to = "Test", values_to = "r")
Cor_p = Cor_p %>% pivot_longer(cols = ME_mean:Mean_singing, names_to = "Test", values_to = "p")
Cor <-merge(Cor_r, Cor_p)
Cor$N <- Cor_n
rm(Cor_r, Cor_p, Cor_n)
#none of the p-values survive correction
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, ME_mean = "General ME", Mean_active = "Active", Mean_perception = "Perception", Mean_singing = "Singing", Mean_emotion = "Emotion", Mean_education = "Education")
Cor$Test <- factor(Cor$Test, levels = c("General ME", "Active", "Perception", "Singing", "Emotion", "Education"))
# save the dataset
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_MSI.txt")
# prepare dataset
Corrdata <- Corrdata[, -c(6,7,8,10)]
Emo <- Corrdata[, c(1:6)] %>% pivot_longer(cols = ACC_f0:ACC_all, names_to = "MType", values_to = "ACC")
MSI <- Corrdata[, c(1,2,7:12)] %>% pivot_longer(cols = ME_mean:Mean_singing, names_to = "Test", values_to = "Score")
Data <- merge(Emo, MSI)
rm(Emo, MSI)
# recode factors
Data$MType <- recode(Data$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Data$MType <- factor(Data$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Data$Test <- recode(Data$Test, ME_mean = "General ME", Mean_active = "Active", Mean_perception = "Perception", Mean_singing = "Singing", Mean_emotion = "Emotion", Mean_education = "Education")
Data$Test <- factor(Data$Test, levels = c("General ME", "Active", "Perception", "Singing", "Emotion", "Education"))
Data$Group <- factor(Data$Group, levels = c("1", "2"))
# format Cor
Cor$p <- round(Cor$p, 3)
Cor$pplot <- paste0("= ", Cor$p)
Cor$pplot <- ifelse(Cor$pplot == "= 0", "< 0.001", Cor$pplot)
Cor$pplot
Cor$sig <- ifelse(Cor$p < 0.05, "bold.italic", "plain")
title = paste0("Correlation between Emotion Classification Performance and Gold-MSI (N = 88)")
filename = paste0("plots/amateurs_05b_correlations_ACC_MSI.png")
p<-(ggplot(data= Data, aes(x = Score, y=ACC)) +
geom_point(aes(color = Group), shape= 18, size = 3) +
labs(y = "Emotion Classification Performance" , x = "Gold-MSI" , title = title, color = "") +       #, title = title
facet_grid(rows = vars(MType), cols = vars(Test), switch = "y", ) + #scales = "free_x"
scale_color_manual(labels = c("Singers", "Instrumentalists"), values = c("green3", "darkgreen")) +
geom_smooth(method='lm', formula= y~x, color = "black") +
geom_text(data= Cor,
aes(label= paste0("r = ", round(r, 2), "\n p ", pplot), x = 2, y = 0.85, fontface = sig), color = "black") +
scale_y_continuous(position = "right") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position="bottom",
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size=14)))
ggsave(filename, width = 17, height = 12, dpi =300)
#remove(yTitleStr, xTitleStr, title, filename, p)
rm(Cor, B, Data, p)
## Partial correlations:
Comb <- expand.grid(c("ACC_all", "ACC_full", "ACC_f0", "ACC_tbr"),c("ME_mean", "Mean_active",
"Mean_emotion", "Mean_perception", "Mean_singing"))
cor_results <- Comb # create "empty" results data frame
cor_results$cor <- NA
cor_results$p <- NA
cor_results$N <- 88
for(i in 1:length(Comb$Var1)) {
#i = 2
cordat <- Corrdata %>% dplyr::select(Comb$Var1[i], Comb$Var2[i], Mean_education)
cor <- pcor(cordat, method = "spearman")  # this Correlation holds
cor_results$cor[i] <-  cor$estimate[1,2]
cor_results$p[i] <- cor$p.value[1,2]
}
Cor <- cor_results
names(Cor) <- c("MType", "Test", "Cor", "p", "N")
rm(cor, Comb, cordat, cor_results)
#perform the multiple comparison correction:
#https://www.youtube.com/watch?v=rZKa4tW2NKs
FDR = 0.05  # set false discovery rate to 5%
Cor <- Cor %>% arrange(p) #order the dataset by p-value
Cor$i <- c(1:20) # assign rank of p-value
m <- 20  # assing number of tests
Cor$CritValue <- (Cor$i / m) * FDR  #(i/m)*Q  # correct the critical value
Cor$p_corrected <- Cor$p * (m / Cor$i)        # correct the p-value itself
#perform adjustement of the corrected value:
Cor$p_corrected2 <- Cor$p_corrected
for (j in (m-1):1){
Cor$p_corrected2[j] <- ifelse(Cor$p_corrected[j] > Cor$p_corrected2[j+1], Cor$p_corrected2[j+1], Cor$p_corrected[j] )
}
# tidy dataset
Cor$MType <- recode(Cor$MType, ACC_all = "Averaged", ACC_full = "Full", ACC_f0 = "F0", ACC_tbr = "Timbre")
Cor$MType <- factor(Cor$MType, levels = c("Averaged", "Full", "F0", "Timbre"))
Cor$Test <- recode(Cor$Test, ME_mean = "General ME", Mean_active = "Active", Mean_perception = "Perception", Mean_singing = "Singing", Mean_emotion = "Emotion")
Cor$Test <- factor(Cor$Test, levels = c("General ME", "Active", "Perception", "Singing", "Emotion"))
# save the dataset
capture.output(as.matrix(Cor), file="output/emotion_classification/amateurs_C_Correlations_ACC_MSI_c-Education.txt")
View(Cor)
rm(Cor)
