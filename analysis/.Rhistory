rm(A2)
yTitleStr = "Proportion of Correct Classifications"
xTitleStr = "Morph Type"
title = paste0("Mean ", yTitleStr, " per ", xTitleStr, " (N =", length(unique(D$Subject))," )")
filename = paste0("plots/amateurs_1d_means_prop_Emo_MType_withGroups.png")
A$MType <- recode(A$MType, full = "Full", f0 = "F0", tbr = "Timbre")
B$MType <- recode(B$MType, full = "Full", f0 = "F0", tbr = "Timbre")
A$Emo <- recode(A$Emo, hap = "Happiness", ple = "Pleasure", fea = "Fear", sad = "Sadness")
B$Emo <- recode(B$Emo, hap = "Happiness", ple = "Pleasure", fea = "Fear", sad = "Sadness")
A$Group <- recode(A$Group, Both = "Both", "1" = "Singers", "2" = "Instrumentalists")
B$Group <- recode(B$Group, Both = "Both", "1" = "Singers", "2" = "Instrumentalists")
# bring factors in order
A$MType <- factor(A$MType, levels= c("Full", "F0", "Timbre"))
B$MType <- factor(B$MType, levels= c("Full", "F0", "Timbre"))
A$Emo <- factor(A$Emo, levels = c("Happiness", "Pleasure", "Fear", "Sadness"))
B$Emo <- factor(B$Emo, levels = c("Happiness", "Pleasure", "Fear", "Sadness"))
A$Group <- factor(A$Group, levels = c("Both", "Instrumentalists","Singers"))
B$Group <- factor(B$Group, levels = c("Both", "Instrumentalists","Singers"))
p<-(ggplot(data= A, aes(x = MType, y=ACC, color = Group)) +
#geom_jitter(data= B, aes(x = MType, y=ACC),  size = 0.75, shape = 16,
# position = position_jitterdodge(jitter.width = 0.02, jitter.height = 0.02, dodge.width = 0.75),
#alpha = 0.2)+ #color="grey"#color = Group
geom_violin(data= B, aes(x = MType, y=ACC, fill = Group), color = NA,  position = position_dodge(width = 0.75), alpha = 0.2) +
geom_point(shape= 18, size = 3, position = position_dodge(width = 0.75)) + #
geom_errorbar(aes(ymin = (ACC-CI), ymax = (ACC+CI)), width = 0.5 , position = position_dodge(width = 0.75)) +
labs(x = xTitleStr , y = yTitleStr, color = "", fill = "") +       #, title = title
facet_wrap(~ Emo, ncol = 4) +
scale_color_manual(values = c("black", "darkgreen", "green3")) +
scale_fill_manual(values = c("black", "darkgreen", "green3")) +
#scale_fill_manual(values = alpha(c("black", "darkred", "darkblue"), 0.2)) +
geom_hline(yintercept = 0.25, linetype = 4) + theme_bw()+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text.x = element_text(color = "black", size = 14), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 14),
strip.text.x = element_text(size = 14),
legend.position="bottom",
legend.text = element_text(size=14)) +
scale_y_continuous(limits=c(0,1.01), breaks = c( 0.0, 0.2, 0.4, 0.6, 0.8, 1.0)))
ggsave(filename, width = 12, height = 5, dpi =300)
View(D)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999)
#---------------------------------------------------------------------------------
#get the preprocessed data:
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
View(D)
#information comes from Psytoolkit-Coding
CB1 <- D %>% filter(CB == "CB1")
CB1$Emo_Resp <- recode_factor(CB1$Resp, `1` = "hap", `2` = "ple", `3` = "sad", `4` = "fea")
CB2 <- D %>% filter(CB == "CB2")
CB2$Emo_Resp <- recode_factor(CB2$Resp, `1` = "sad", `2` = "fea", `3` = "hap", `4` = "ple")
CB3 <- D %>% filter(CB == "CB3")
CB3$Emo_Resp <- recode_factor(CB3$Resp, `1` = "ple", `2` = "hap", `3` = "fea", `4` = "sad")
CB4 <- D %>% filter(CB == "CB4")
CB4$Emo_Resp <- recode_factor(CB4$Resp, `1` = "fea", `2` = "sad", `3` = "ple", `4` = "hap")
D <- rbind(CB1, CB2, CB3, CB4)
rm(CB1, CB2, CB3, CB4)
#save this dataset
save(D, file="input/Exp_processed_with_Resp.RData")
#---------------------------------------------------------------------------------#
#                        Analysis of Averaged Emotions                            #
#---------------------------------------------------------------------------------#
all <- D # copy of the data
#get average Trials only
D <- all %>% filter(Emo == "avg")
### average data for ANOVA
D <- D%>% group_by(Subject, Code, Group, Emo_Resp) %>% summarise(N = length(ACC))
4*88
## complete missing combinations: we need 4 rows per participant = 352
D <- as_tibble(D)
Codes <- D[,c(1:3)] %>% group_by(Subject, Code) %>% summarise(Group = unique(Group)) #copy the code information, because it will be lost in the next command
D <- D %>% complete(Subject,Emo_Resp)
D <- as.data.frame(D)
D$Group <- NULL
D$Code <- NULL
#assign Code/Group to each Subject again
D <- merge(D, Codes)
D$N <- ifelse(is.na(D$N), 0, D$N)
### Define variables as appropriate data class and drop levels of factors
D$Subject <- as.factor(as.character(D$Subject))
D <-  droplevels(D)
D$Freq <- D$N/24 # we have 24 trials with avg in total
a<-ezANOVA(data=D, dv=.(Freq), wid=.(Subject), within = .(Emo_Resp), between = .(Group), type=3, detailed = TRUE)
b = tracedEzOut(a, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
Fs <-  c(round(a$ANOVA[[6]], 5))[2:4]
Df <-  c(round(a$ANOVA[[2]], 5))[2:4]
Df2 <- c(round(a$ANOVA[[3]], 5))[2:4]
### calculate omega effect sizes:
o2_emo <- F_to_omega2(Fs,  Df,  Df2, ci = 0.95)   # enter F, df1, df2
# save output to textfile
capture.output(b, o2_emo, file = "output/emotion_classification/amateurs_B_ANOVA_Average.txt")
rm(a,b, o2_emo, Fs, Df, Df2)
#reaggreate dataset
PH1 <- D %>% group_by(Subject,Emo_Resp) %>% summarise(Freq=mean(Freq))
#extract descriptive data
PH1_descriptive <- mySummary(PH1,Freq, Emo_Resp)
View(PH1_descriptive)
View(D)
Fs <-  c(round(a$ANOVA[[6]], 5))[2:4]
View(PH1_descriptive)
# get the whole dataset back:
D <- all
## Calculate the number of responses for each emotion x mType combination, separately for participants
C <- D %>% group_by(Subject, Group, MType, Emo, Emo_Resp) %>% summarise(N = length(Emo))
AVG <- C %>% filter(Emo == "avg") # treat averaged Stimuli differently
C <- C %>% filter(Emo != "avg")
## complete missing combinations
C <- as_tibble(C)
C <- C %>% complete(Subject,MType, Emo, Emo_Resp)
AVG <- as_tibble(AVG)
AVG <- AVG %>% complete(Subject, Emo_Resp)
AVG$MType <- "full"
AVG$Emo <- "avg"
AVG <- AVG[c(1,4,5,2,3,6)]
C <- rbind(C, AVG) # this is the correct number of rows -> 4004
rm(AVG)
C <- as.data.frame(C)
C$Group <- NULL
52*88
##fix the Group Information again
C <- merge(C, Codes)
rm(Codes)
C$N <- ifelse(is.na(C$N), 0, C$N)
C$Freq <- C$N/24
# label all combinations which are correct
C$Correct <- ifelse(C$Emo == C$Emo_Resp, "Yes", "No")
C_all <- C # save unaveraged Dataset
# Average proportions across Participants
C <- C %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
yTitleStr = "Classification Proportion in %"
xTitleStr = "Emotion"
facetStr =  " splitted per mType"
title = paste0("Confusion matrix: Proportion of ", yTitleStr, " per ", xTitleStr, facetStr, " (N =", length(unique(D$Subject))," )")
filename = paste0("plots/04_confusion_matrix_emotion_withavg.png")
C$MType <- recode(C$MType, full = "Full", f0 = "F0", tbr = "Timbre")
C$MType <- factor(C$MType, levels = c("Full", "F0", "Timbre"))
C$Emo <- recode(C$Emo, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad", avg = "Avg")
C$Emo <- factor(C$Emo, levels = c("Hap", "Ple", "Fea", "Sad", "Avg"))
C$Emo_Resp<- recode(C$Emo_Resp, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad")
C$Emo_Resp <- factor(C$Emo_Resp, levels = c("Hap", "Ple", "Fea", "Sad"))
C$Freq <- round(C$Freq, 2)
# as heatmap
p <- (ggplot(data = C, aes(x=Emo, y=Emo_Resp, fill=Freq)) +
geom_tile(show.legend = FALSE) +
labs( x = xTitleStr , y = yTitleStr
) +
facet_wrap(~ MType, ncol = 3, scales = "free") +
scale_fill_gradient(low = "white", high = "darkgrey") +
theme(panel.background = element_rect(fill = 'white'),
axis.text=element_text(size=16),
axis.title=element_text(size=16),
axis.text.x = element_text(color = "black", size = 16), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 16),
strip.text.x = element_text(size = 16)) +
geom_text(aes(label=(Freq*100)), color = "black", size = 5))
ggsave(filename, width = 12, height = 4, dpi =300)
yTitleStr = "Classification Proportion in %"
xTitleStr = "Emotion"
facetStr =  " splitted per mType"
title = paste0("Confusion matrix: Proportion of ", yTitleStr, " per ", xTitleStr, facetStr, " (N =", length(unique(D$Subject))," )")
filename = paste0("plots/amateurs_04_confusion_matrix_emotion_withavg.png")
C$MType <- recode(C$MType, full = "Full", f0 = "F0", tbr = "Timbre")
C$MType <- factor(C$MType, levels = c("Full", "F0", "Timbre"))
C$Emo <- recode(C$Emo, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad", avg = "Avg")
C$Emo <- factor(C$Emo, levels = c("Hap", "Ple", "Fea", "Sad", "Avg"))
C$Emo_Resp<- recode(C$Emo_Resp, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad")
C$Emo_Resp <- factor(C$Emo_Resp, levels = c("Hap", "Ple", "Fea", "Sad"))
C$Freq <- round(C$Freq, 2)
# as heatmap
p <- (ggplot(data = C, aes(x=Emo, y=Emo_Resp, fill=Freq)) +
geom_tile(show.legend = FALSE) +
labs( x = xTitleStr , y = yTitleStr
) +
facet_wrap(~ MType, ncol = 3, scales = "free") +
scale_fill_gradient(low = "white", high = "darkgrey") +
theme(panel.background = element_rect(fill = 'white'),
axis.text=element_text(size=16),
axis.title=element_text(size=16),
axis.text.x = element_text(color = "black", size = 16), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 16),
strip.text.x = element_text(size = 16)) +
geom_text(aes(label=(Freq*100)), color = "black", size = 5))
ggsave(filename, width = 12, height = 4, dpi =300)
View(C_all)
# Average proportions across Participants
C <- C_all %>% filter(Group == "1") %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
yTitleStr = "Classification Proportion in %"
xTitleStr = "Emotion"
facetStr =  " splitted per mType"
#title = paste0("Confusion matrix: Proportion of ", yTitleStr, " per ", xTitleStr, facetStr, " (Musicians only)")
filename = paste0("plots/amateurs_04b_singers_confusion_matrix_emotion_withavg.png")
C$MType <- recode(C$MType, full = "Full", f0 = "F0", tbr = "Timbre")
C$MType <- factor(C$MType, levels = c("Full", "F0", "Timbre"))
C$Emo <- recode(C$Emo, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad", avg = "Avg")
C$Emo <- factor(C$Emo, levels = c("Hap", "Ple", "Fea", "Sad", "Avg"))
C$Emo_Resp<- recode(C$Emo_Resp, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad")
C$Emo_Resp <- factor(C$Emo_Resp, levels = c("Hap", "Ple", "Fea", "Sad"))
C$Freq <- round(C$Freq, 2)
# as heatmap
p <- (ggplot(data = C, aes(x=Emo, y=Emo_Resp, fill=Freq)) +
geom_tile(show.legend = FALSE) +
labs( x = xTitleStr , y = yTitleStr , #title = title
) +
facet_wrap(~ MType, ncol = 3, scales = "free") +
scale_fill_gradient(low = "white", high = "darkgrey") +
theme(panel.background = element_rect(fill = 'white'),
axis.text=element_text(size=16),
axis.title=element_text(size=16),
axis.text.x = element_text(color = "black", size = 16), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 16),
strip.text.x = element_text(size = 16)) +
geom_text(aes(label=(Freq*100)), color = "black", size = 5))
ggsave(filename, width = 12, height = 4, dpi =300)
########################
##### Singers Only ###
########################
# Average proportions across Participants
C <- C_all %>% filter(Group == "1") %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
View(C)
# get the whole dataset back:
D <- all
## Calculate the number of responses for each emotion x mType combination, separately for participants
C <- D %>% group_by(Subject, Group, MType, Emo, Emo_Resp) %>% summarise(N = length(Emo))
View(C)
AVG <- C %>% filter(Emo == "avg") # treat averaged Stimuli differently
C <- C %>% filter(Emo != "avg")
## complete missing combinations
C <- as_tibble(C)
C <- C %>% complete(Subject,MType, Emo, Emo_Resp)
AVG <- as_tibble(AVG)
AVG <- AVG %>% complete(Subject, Emo_Resp)
AVG$MType <- "full"
AVG$Emo <- "avg"
AVG <- AVG[c(1,4,5,2,3,6)]
C <- rbind(C, AVG) # this is the correct number of rows -> 4004
rm(AVG)
C <- as.data.frame(C)
C$Group <- NULL
##fix the Group Information again
C <- merge(C, Codes)
rm(Codes)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999)
#---------------------------------------------------------------------------------
#get the preprocessed data:
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
#information comes from Psytoolkit-Coding
CB1 <- D %>% filter(CB == "CB1")
CB1$Emo_Resp <- recode_factor(CB1$Resp, `1` = "hap", `2` = "ple", `3` = "sad", `4` = "fea")
CB2 <- D %>% filter(CB == "CB2")
CB2$Emo_Resp <- recode_factor(CB2$Resp, `1` = "sad", `2` = "fea", `3` = "hap", `4` = "ple")
CB3 <- D %>% filter(CB == "CB3")
CB3$Emo_Resp <- recode_factor(CB3$Resp, `1` = "ple", `2` = "hap", `3` = "fea", `4` = "sad")
CB4 <- D %>% filter(CB == "CB4")
CB4$Emo_Resp <- recode_factor(CB4$Resp, `1` = "fea", `2` = "sad", `3` = "ple", `4` = "hap")
D <- rbind(CB1, CB2, CB3, CB4)
rm(CB1, CB2, CB3, CB4)
#save this dataset
save(D, file="input/Exp_processed_with_Resp.RData")
#---------------------------------------------------------------------------------#
#                        Analysis of Averaged Emotions                            #
#---------------------------------------------------------------------------------#
all <- D # copy of the data
#get average Trials only
D <- all %>% filter(Emo == "avg")
### average data for ANOVA
D <- D %>% group_by(Subject, Code, Group, Emo_Resp) %>% summarise(N = length(ACC))
## complete missing combinations: we need 4 rows per participant = 352
D <- as_tibble(D)
Codes <- D[,c(1:3)] %>% group_by(Subject, Code) %>% summarise(Group = unique(Group)) #copy the code information, because it will be lost in the next command
D <- D %>% complete(Subject,Emo_Resp)
D <- as.data.frame(D)
D$Group <- NULL
D$Code <- NULL
#assign Code/Group to each Subject again
D <- merge(D, Codes)
D$N <- ifelse(is.na(D$N), 0, D$N)
### Define variables as appropriate data class and drop levels of factors
D$Subject <- as.factor(as.character(D$Subject))
D <-  droplevels(D)
D$Freq <- D$N/24 # we have 24 trials with avg in total
View(D)
a<-ezANOVA(data=D, dv=.(Freq), wid=.(Subject), within = .(Emo_Resp), between = .(Group), type=3, detailed = TRUE)
b = tracedEzOut(a, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
Fs <-  c(round(a$ANOVA[[6]], 5))[2:4]
Df <-  c(round(a$ANOVA[[2]], 5))[2:4]
Df2 <- c(round(a$ANOVA[[3]], 5))[2:4]
### calculate omega effect sizes:
o2_emo <- F_to_omega2(Fs,  Df,  Df2, ci = 0.95)   # enter F, df1, df2
# save output to textfile
capture.output(b, o2_emo, file = "output/emotion_classification/amateurs_B_ANOVA_Average.txt")
rm(a,b, o2_emo, Fs, Df, Df2)
# get the whole dataset back:
D <- all
## Calculate the number of responses for each emotion x mType combination, separately for participants
C <- D %>% group_by(Subject, Group, MType, Emo, Emo_Resp) %>% summarise(N = length(Emo))
View(C)
AVG <- C %>% filter(Emo == "avg") # treat averaged Stimuli differently
C <- C %>% filter(Emo != "avg")
## complete missing combinations
C <- as_tibble(C)
C <- C %>% complete(Subject,MType, Emo, Emo_Resp)
AVG <- as_tibble(AVG)
AVG <- AVG %>% complete(Subject, Emo_Resp)
AVG$MType <- "full"
AVG$Emo <- "avg"
AVG <- AVG[c(1,4,5,2,3,6)]
C <- rbind(C, AVG) # this is the correct number of rows -> 4004
rm(AVG)
C <- as.data.frame(C)
C$Group <- NULL
##fix the Group Information again
C <- merge(C, Codes)
rm(Codes)
C$N <- ifelse(is.na(C$N), 0, C$N)
C$Freq <- C$N/24
# label all combinations which are correct
C$Correct <- ifelse(C$Emo == C$Emo_Resp, "Yes", "No")
C_all <- C # save unaveraged Dataset
View(C_all)
# Average proportions across Participants
C <- C %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
View(C)
sum(C$Freq)
yTitleStr = "Classification Proportion in %"
xTitleStr = "Emotion"
facetStr =  " splitted per mType"
title = paste0("Confusion matrix: Proportion of ", yTitleStr, " per ", xTitleStr, facetStr, " (N =", length(unique(D$Subject))," )")
filename = paste0("plots/amateurs_04_confusion_matrix_emotion_withavg.png")
C$MType <- recode(C$MType, full = "Full", f0 = "F0", tbr = "Timbre")
C$MType <- factor(C$MType, levels = c("Full", "F0", "Timbre"))
C$Emo <- recode(C$Emo, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad", avg = "Avg")
C$Emo <- factor(C$Emo, levels = c("Hap", "Ple", "Fea", "Sad", "Avg"))
C$Emo_Resp<- recode(C$Emo_Resp, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad")
C$Emo_Resp <- factor(C$Emo_Resp, levels = c("Hap", "Ple", "Fea", "Sad"))
C$Freq <- round(C$Freq, 2)
# as heatmap
p <- (ggplot(data = C, aes(x=Emo, y=Emo_Resp, fill=Freq)) +
geom_tile(show.legend = FALSE) +
labs( x = xTitleStr , y = yTitleStr
) +
facet_wrap(~ MType, ncol = 3, scales = "free") +
scale_fill_gradient(low = "white", high = "darkgrey") +
theme(panel.background = element_rect(fill = 'white'),
axis.text=element_text(size=16),
axis.title=element_text(size=16),
axis.text.x = element_text(color = "black", size = 16), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 16),
strip.text.x = element_text(size = 16)) +
geom_text(aes(label=(Freq*100)), color = "black", size = 5))
ggsave(filename, width = 12, height = 4, dpi =300)
remove(yTitleStr, xTitleStr, facetStr, title, filename, p)
########################
##### Singers Only ###
########################
# Average proportions across Participants
C <- C_all %>% filter(Group == "1") %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
View(C)
sum(C$Freq)
View(C)
View(C_all)
# Average proportions across Participants
C <- C_all %>% filter(Group == "2") %>% group_by(MType, Emo, Emo_Resp) %>% summarise(Freq = mean(Freq),
N = length(Emo))
yTitleStr = "Classification Proportion in %"
xTitleStr = "Emotion"
facetStr =  " splitted per mType"
#title = paste0("Confusion matrix: Proportion of ", yTitleStr, " per ", xTitleStr, facetStr, " (Nonmusicians only)")
filename = paste0("plots/amateurs_04c_instrumentalists_confusion_matrix_emotion_withavg.png")
C$MType <- recode(C$MType, full = "Full", f0 = "F0", tbr = "Timbre")
C$MType <- factor(C$MType, levels = c("Full", "F0", "Timbre"))
C$Emo <- recode(C$Emo, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad", avg = "Avg")
C$Emo <- factor(C$Emo, levels = c("Hap", "Ple", "Fea", "Sad", "Avg"))
C$Emo_Resp<- recode(C$Emo_Resp, hap = "Hap", ple = "Ple", fea = "Fea", sad = "Sad")
C$Emo_Resp <- factor(C$Emo_Resp, levels = c("Hap", "Ple", "Fea", "Sad"))
C$Freq <- round(C$Freq, 2)
# as heatmap
p <- (ggplot(data = C, aes(x=Emo, y=Emo_Resp, fill=Freq)) +
geom_tile(show.legend = FALSE) +
labs( x = xTitleStr , y = yTitleStr , #title = title
) +
facet_wrap(~ MType, ncol = 3, scales = "free") +
scale_fill_gradient(low = "white", high = "darkgrey") +
theme(panel.background = element_rect(fill = 'white'),
axis.text=element_text(size=16),
axis.title=element_text(size=16),
axis.text.x = element_text(color = "black", size = 16), # angle = 45, hjust = 1.2, vjust =  1.2
axis.text.y = element_text(color = "black", size = 16),
strip.text.x = element_text(size = 16)) +
geom_text(aes(label=(Freq*100)), color = "black", size = 5))
ggsave(filename, width = 12, height = 4, dpi =300)
sum(C_all$Freq)
88*13
View(C)
View(C_all)
#information comes from Psytoolkit-Coding
CB1 <- D %>% filter(CB == "CB1")
CB1$Emo_Resp <- recode_factor(CB1$Resp, `1` = "hap", `2` = "ple", `3` = "sad", `4` = "fea")
CB2 <- D %>% filter(CB == "CB2")
CB2$Emo_Resp <- recode_factor(CB2$Resp, `1` = "sad", `2` = "fea", `3` = "hap", `4` = "ple")
CB3 <- D %>% filter(CB == "CB3")
CB3$Emo_Resp <- recode_factor(CB3$Resp, `1` = "ple", `2` = "hap", `3` = "fea", `4` = "sad")
CB4 <- D %>% filter(CB == "CB4")
CB4$Emo_Resp <- recode_factor(CB4$Resp, `1` = "fea", `2` = "sad", `3` = "ple", `4` = "hap")
D <- rbind(CB1, CB2, CB3, CB4)
rm(CB1, CB2, CB3, CB4)
#save this dataset
save(D, file="input/Exp_processed_with_Resp.RData")
#---------------------------------------------------------------------------------#
#                        Analysis of Averaged Emotions                            #
#---------------------------------------------------------------------------------#
all <- D # copy of the data
#get average Trials only
D <- all %>% filter(Emo == "avg")
### average data for ANOVA
D <- D %>% group_by(Subject, Code, Group, Emo_Resp) %>% summarise(N = length(ACC))
## complete missing combinations: we need 4 rows per participant = 352
D <- as_tibble(D)
Codes <- D[,c(1:3)] %>% group_by(Subject, Code) %>% summarise(Group = unique(Group)) #copy the code information, because it will be lost in the next command
D <- D %>% complete(Subject,Emo_Resp)
D <- as.data.frame(D)
D$Group <- NULL
D$Code <- NULL
#assign Code/Group to each Subject again
D <- merge(D, Codes)
D$N <- ifelse(is.na(D$N), 0, D$N)
### Define variables as appropriate data class and drop levels of factors
D$Subject <- as.factor(as.character(D$Subject))
D <-  droplevels(D)
D$Freq <- D$N/24 # we have 24 trials with avg in total
View(D)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999)
#get the preprocessed data:
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#r
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
table(D$Code, D$)
table(D$Code, D$Emo)
View(D)
#NOT PUBLISHED
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/emo_exp/")
names(D) <- c("SpId", "Emo","Word",  "MType", "SpSex", "filename", "CB", "ACC", "Resp", "RT", "Block", "TrialNo", "Experiment", "Date", "Subject")
View(D)
D <- D %>% filter(Block != "practise")
# check if all stimuli are here
length(unique(D$filename))
table(D$Subject)
D$ACC <- ifelse(D$ACC == 1, 1,0)
# save prepared dataset:
save(D, file="input/Exp_raw.RData")
table(D$Emo, D$Subject)
#--------------------------------------------------------------------------------
table(D$Subject, D$filename)
