Education = mean(Mean_education),
Education_SD = sd(Mean_education),
Emotion = mean(Mean_emotion),
Emotion_SD = sd(Mean_emotion),
Singing = mean(Mean_singing),
Singing_SD = sd(Mean_singing),
Perception = mean(Mean_perception),
Perception_SD = sd(Mean_perception))
#GOLD-MSI
ME <- t.test(data = survey, ME_mean ~ Group, paired =  FALSE)
d_ME <- t_to_d(ME$statistic, ME$parameter, paired = FALSE)
Active <- t.test(data = survey, Mean_active ~ Group, paired =  FALSE)
d_Active <- t_to_d(Active$statistic, Active$parameter, paired = FALSE)
Education <- t.test(data = survey, Mean_education ~ Group, paired =  FALSE)
d_Education <- t_to_d(Education$statistic, Education$parameter, paired = FALSE)
Emotion <- t.test(data = survey, Mean_emotion ~ Group, paired =  FALSE)
d_Emotion <- t_to_d(Emotion$statistic, Emotion$parameter, paired = FALSE)
Singing <- t.test(data = survey, Mean_singing ~ Group, paired =  FALSE)
d_Singing <- t_to_d(Singing$statistic, Singing$parameter, paired = FALSE)
Perception <- t.test(data = survey, Mean_perception ~ Group, paired =  FALSE)
d_Perception <- t_to_d(Perception$statistic, Perception$parameter, paired = FALSE)
capture.output(as.matrix(MSI_summary), ME, d_ME, Active, d_Active, Education, d_Education, Emotion, d_Emotion, Singing, d_Singing, Perception, d_Perception, file="output/musicality/Gold-MSI.txt")
rm(MSI_summary, ME, Active, Education, Emotion, Singing, Perception, d_ME, d_Active, d_Education, d_Emotion, d_Singing, d_Perception)
#------------------------------------------------------------------------------------------------------------------#
#                                           OCEAN                                                               #
#------------------------------------------------------------------------------------------------------------------#
# descriptive_data
OCEAN <- survey %>% group_by(Group) %>% summarise(o = round(mean(O), 2),
O_SD = round(sd(O), 2),
c = round(mean(C), 2),
C_SD = round(sd(C), 2),
e = round(mean(E), 2),
E_SD = round(sd(E), 2),
a = round(mean(A), 2),
A_SD = round(sd(A), 2),
n = round(mean(N), 2),
N_SD = round(sd(N), 2))
#OCEAN
O = t.test(data = survey, O ~ Group, paired =  FALSE)
d_O <- t_to_d(O$statistic, O$parameter, paired = FALSE)
C = t.test(data = survey, C ~ Group, paired =  FALSE)
d_C <- t_to_d(C$statistic, C$parameter, paired = FALSE)
E = t.test(data = survey, E ~ Group, paired =  FALSE)
d_E <- t_to_d(E$statistic, E$parameter, paired = FALSE)
A = t.test(data = survey, A ~ Group, paired =  FALSE)
d_A <- t_to_d(A$statistic, A$parameter, paired = FALSE)
N = t.test(data = survey, N ~ Group, paired =  FALSE)
d_N <- t_to_d(N$statistic, N$parameter, paired = FALSE)
capture.output(as.matrix(OCEAN), O,d_O, C, d_C, E, d_E, A, d_A, N, d_N, file="output/sample_description/OCEAN.txt")
rm(OCEAN, O,C,E,A,N, d_O, d_C, d_E, d_A, d_N)
## singers only
singers <- survey %>% filter(Group =="1")
#fix age column
singers$AgeTraining <- ifelse(is.na(singers$AgeTraining), 0, singers$AgeTraining)
AgeTrainingAll<- table(singers$AgeTraining)
TrainingSing <- singers %>% filter(AgeTraining > 0)
#Age at onset of training
AgeTrainingSubSet<- mySummary(TrainingSing, AgeTraining)
Range <- range(TrainingSing$AgeTraining)
capture.output(as.matrix(AgeTrainingAll), as.matrix(AgeTrainingSubSet), Range, file= "output/sample_description/Singers_onsetAge.txt")
# years of musical training
yearsTraining<- table(singers$YearsTraining)
capture.output(as.matrix(yearsTraining), file= "output/sample_description/Singers_yearsTraining.txt")
rm(AgeTrainingAll, AgeTrainingSubSet, Range, yearsTraining)
#which Instruments:
Instruments <- as.data.frame(table(singers$Instrument2))
capture.output(as.matrix(Instruments), file = "output/sample_description/Singers_Instruments.txt")
rm(Instruments, TrainingSing)
rm(singers)
## instrumentalists only
instrumentalists <- survey %>% filter(Group =="2")
#fix the AgeTraining column
instrumentalists$AgeTraining <- ifelse(is.na(instrumentalists$AgeTraining), 0, instrumentalists$AgeTraining)
AgeTrainingAll<- table(instrumentalists$AgeTraining)
TrainingInstr <- instrumentalists %>% filter(AgeTraining > 0)
#Age at onset of training
AgeTrainingSubSet<- mySummary(TrainingInstr, AgeTraining)
Range <- range(TrainingInstr$AgeTraining)
capture.output(as.matrix(AgeTrainingAll), as.matrix(AgeTrainingSubSet), Range, file= "output/sample_description/Instrumentalists_onsetAge.txt")
# years of musical training
yearsTraining<- table(instrumentalists$YearsTraining)
capture.output(as.matrix(yearsTraining), file= "output/sample_description/Instrumentalists_yearsTraining.txt")
rm(AgeTrainingAll, AgeTrainingSubSet, Range, yearsTraining)
#which Instruments:
Instruments <- as.data.frame(table(instrumentalists$Instrument2))
capture.output(as.matrix(Instruments), file = "output/sample_description/Instrumentalists_Instruments.txt")
rm(Instruments, TrainingInstr)
rm(instrumentalists)
35+1+3+4
4+2+4+4+2+7+2+1+2+1+3+1+1+1
##########################################################################
## File: 01a_data_preparation_exp_proms.R.R
## Data Preparation for the Online Experiment Data and Proms Data
# authors: Christine Nussbaum, Jessica Senftleben
# date 07/2021
#NOT PUBLISHED
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#                             emotion classification task
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/emo_exp/")
names(D) <- c("SpId", "Emo","Word",  "MType", "SpSex", "filename", "CB", "ACC", "Resp", "RT", "Block", "TrialNo", "Experiment", "Date", "Subject")
# practise-Trials raus
D <- D %>% filter(Block != "practise")
# check if all stimuli are here
length(unique(D$filename))
table(D$Subject)
D$ACC <- ifelse(D$ACC == 1, 1,0)
# save prepared dataset:
save(D, file="input/Exp_raw.RData")
#--------------------------------------------------------------------------------
### Processing for further analyses
## Analysis of missings
missings <- D %>% filter(RT >= 5000) # omission, RT-cutoff was 5000ms
missings_n <- missings %>% group_by(Subject) %>% summarise(n = length(Experiment))
#-> Missing criterion is 5% (= 15.6 trials of 312), so two participants have to be removed (c7e7e936 and ecd4a2cb)
to_be_removed <- missings_n$Subject[missings_n$n > 15]
#remove these participants from the dataset:
D <- D %>% filter(!(D$Subject  %in% to_be_removed))
missings_n <- missings_n %>% filter(!(Subject  %in% to_be_removed))
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
#save summary information about trials of omission:
missings_n$percent <- missings_n$n /312
missings_info <- mySummary(missings_n, percent)
capture.output(missings_info, file="output/amateurs_omissions_summary.txt")
rm(missings_info, missings_n, missings)
#save information about the removed participants:
save(to_be_removed, file ="input/amateurs_to_be_removed.RData")
## Removing data with faulty audio
# remove participants with faulty audio-files
D <- subset(D, Subject!="08eba336") # instrumentalist AIG27E
D <- subset(D, Subject!="27e3b37a") # singer IHP42U
#ecd4a2cb (Subject SCS58E) also reported faulty audio-files, but is already removed because of omitting >5% of trials
# remove participant who is both in a choir and a band
D <- subset(D, Subject!="a67e3eb6") #NIR46E
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
## merge with relevant data from survey (Group, Code)
# set path to survey data
relPathDirFile = "input/survey/data.csv"
Raw <- read.csv(relPathDirFile, header= TRUE, sep = ",", row.names = NULL)
#fix  colnames
cols <- names(Raw)
names(Raw) <-cols[1:189]
Raw <- Raw[,1:189]
#fix single participant who closed the window too fast and has no time_end
Raw$TIME_end[Raw$TIME_start == "2024-01-24-18-23"] <- "2024-01-24-19-38"
Raw$TIME_total[Raw$TIME_start == "2024-01-24-18-23"] <- 75
#remove all incompleted datasets (they dont have time_end)
Raw <- Raw %>% filter(!is.na(Raw$TIME_total))
# remove test dataset (ENH59A)
Raw <- subset(Raw, intro_question1_1!="1062023")
N <- length(Raw$participant)
Raw$VPN <- paste0("VPN_",c(1:N))
#extract participant and Code
Raw$participant <- str_sub(Raw$participant , 31, 38)
Raw$Partcode <- paste0(Raw$LPartCode_1, Raw$LPartCode_2, Raw$LPartCode_3, Raw$LPartCode_4, Raw$LPartCode_5, Raw$LPartCode_6)
#remove irrelevant variables
Raw <- Raw[ , -c(180:185)]
nSubs <- length(unique(Raw$participant))
print(paste("loaded data from", nSubs, "participants", sep=" "))
#isolate relevant variables (Subject, Group, Code)
Sample <- Raw[, c(1,185,7)]
names(Sample) <- c("Subject", "Code", "Group")
Sample$Code <-toupper(Sample$Code)  # make code uppercase
## merge exp data with relevant survey data
D2 <- merge(D, Sample)
# correct Group assignment for one participant (AEM51L)
D2$Group[D2$Code == "AEM51L"] <- 1
#tidy up so it matches data set from professionals/nonmusicians
D <- D2[,c(1,16,17,2:11)]
save(D, file="input/amateurs_Exp_processed.RData")
rm(D2,Raw, N, cols, nSubs, relPathDirFile)
View(D)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/emo_exp/")
names(D) <- c("SpId", "Emo","Word",  "MType", "SpSex", "filename", "CB", "ACC", "Resp", "RT", "Block", "TrialNo", "Experiment", "Date", "Subject")
D <- D %>% filter(Block != "practise")
# check if all stimuli are here
length(unique(D$filename))
table(D$Subject)
D$ACC <- ifelse(D$ACC == 1, 1,0)
# save prepared dataset:
save(D, file="input/Exp_raw.RData")
## Analysis of missings
missings <- D %>% filter(RT >= 5000) # omission, RT-cutoff was 5000ms
missings_n <- missings %>% group_by(Subject) %>% summarise(n = length(Experiment))
#-> Missing criterion is 5% (= 15.6 trials of 312), so two participants have to be removed (c7e7e936 and ecd4a2cb)
to_be_removed <- missings_n$Subject[missings_n$n > 15]
#remove these participants from the dataset:
D <- D %>% filter(!(D$Subject  %in% to_be_removed))
missings_n <- missings_n %>% filter(!(Subject  %in% to_be_removed))
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
#save summary information about trials of omission:
missings_n$percent <- missings_n$n /312
missings_info <- mySummary(missings_n, percent)
capture.output(missings_info, file="output/amateurs_omissions_summary.txt")
rm(missings_info, missings_n, missings)
#save information about the removed participants:
save(to_be_removed, file ="input/amateurs_to_be_removed.RData")
## Removing data with faulty audio
# remove participants with faulty audio-files
D <- subset(D, Subject!="08eba336") # instrumentalist AIG27E
D <- subset(D, Subject!="27e3b37a") # singer IHP42U
# remove participant who is both in a choir and a band
D <- subset(D, Subject!="a67e3eb6") #NIR46E
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
## merge with relevant data from survey (Group, Code)
# set path to survey data
relPathDirFile = "input/survey/data.csv"
Raw <- read.csv(relPathDirFile, header= TRUE, sep = ",", row.names = NULL)
#fix  colnames
cols <- names(Raw)
names(Raw) <-cols[1:189]
Raw <- Raw[,1:189]
#fix single participant who closed the window too fast and has no time_end
Raw$TIME_end[Raw$TIME_start == "2024-01-24-18-23"] <- "2024-01-24-19-38"
Raw$TIME_total[Raw$TIME_start == "2024-01-24-18-23"] <- 75
#remove all incompleted datasets (they dont have time_end)
Raw <- Raw %>% filter(!is.na(Raw$TIME_total))
# remove test dataset (ENH59A)
Raw <- subset(Raw, intro_question1_1!="1062023")
N <- length(Raw$participant)
Raw$VPN <- paste0("VPN_",c(1:N))
#extract participant and Code
Raw$participant <- str_sub(Raw$participant , 31, 38)
Raw$Partcode <- paste0(Raw$LPartCode_1, Raw$LPartCode_2, Raw$LPartCode_3, Raw$LPartCode_4, Raw$LPartCode_5, Raw$LPartCode_6)
#remove irrelevant variables
Raw <- Raw[ , -c(180:185)]
nSubs <- length(unique(Raw$participant))
print(paste("loaded data from", nSubs, "participants", sep=" "))
#isolate relevant variables (Subject, Group, Code)
Sample <- Raw[, c(1,185,7)]
names(Sample) <- c("Subject", "Code", "Group")
Sample$Code <-toupper(Sample$Code)  # make code uppercase
View(Sample)
## merge exp data with relevant survey data
D2 <- merge(D, Sample)
# correct Group assignment for one participant (AEM51L)
D2$Group[D2$Code == "AEM51L"] <- 1
#tidy up so it matches data set from professionals/nonmusicians
D <- D2[,c(1,16,17,2:11)]
save(D, file="input/amateurs_Exp_processed.RData")
rm(D2,Raw, N, cols, nSubs, relPathDirFile)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999) # supresses the e^-notation
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
# rename D2 back to D to make script easier to read
D <- D2
names(D)
#extract distribution of counterbalancing conditions
CB <- D[, c(2,3,10)]
CB <- unique(CB)
# capture output:
capture.output(table(CB$CB, CB$Group), file="output/sample_description/counterbalancing_amateurs.txt")
rm(CB)
#missing analysis
missings <- D %>% filter(RT == 5000)
missings <- missings %>% group_by(Code, Group) %>% summarise(N = length(RT))
missings$Percent <- round((missings$N/312 *100), 1)
capture.output(as.matrix(missings), file="output/emotion_classification/amateurs_missings.txt")
rm(missings)
#remove average trials for this analysis
D <- D %>% filter(Emo != "avg")
### aggregate data for ANOVA
D <- D %>% group_by(Subject, Group, Emo, MType) %>% summarise(ACC = mean(ACC))
88*4*3
### Define variables as appropriate data class and drop levels of factors
D$Subject <- as.factor(as.character(D$Subject))
D$MType <- as.factor(as.character(D$MType))
D$Emo <- as.factor(as.character(D$Emo))
D$Group <- as.factor(as.character(D$Group))
D <-  droplevels(D)
a<-ezANOVA(data=D, dv=.(ACC), wid=.(Subject), within = .(Emo, MType), between = .(Group), type=3, detailed = TRUE)
b = tracedEzOut(a, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
### calculate omega effect sizes:
o2_emo <- F_to_omega2(unlist(c(a$ANOVA[6])),  unlist(c(a$ANOVA[2])),  unlist(c(a$ANOVA[3])), ci = 0.95, alternative = "two.sided")   # enter F, df1, df2
# save output to textfile
capture.output(b, o2_emo, file = "output/emotion_classification/amateurs_A_Behavior_ANOVA_I.txt")
rm(a,b, o2_emo)
#reaggreate dataset
PH1 <- D %>% group_by(Subject,Group) %>% summarise(ACC=mean(ACC))
#extract descriptive data
PH1_descriptive <- mySummary(PH1, ACC, Group)
# perform pairwise t-tests
Group <- t.test(data = PH1, ACC ~ Group, paired=FALSE)
d_Group <- t_to_d(Group$statistic, Group$parameter, paired = FALSE)
#add descriptions for output:
info <- c("Singers vs Instrumentalists")
# save output to textfile
capture.output(info, Group, d_Group,  as.matrix(PH1_descriptive),
file="output/emotion_classification/amateurs_A_PH1_ME_group.txt")
#remove objects to keep environment tidy
rm(info, Group, d_Group, PH1_descriptive, PH1)
#reaggreate dataset
PH2 <- D %>% group_by(Subject,Emo) %>% summarise(ACC=mean(ACC))
#extract descriptive data
PH2_descriptive <- mySummary(PH2, ACC, Emo)
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/6 = .008
HapPle <- PH2 %>% filter(Emo == "hap" | Emo == "ple") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_HapPle <- t_to_d(HapPle$statistic, HapPle$parameter, paired = TRUE)
HapFea <- PH2 %>% filter(Emo == "hap" | Emo == "fea") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_HapFea <- t_to_d(HapFea$statistic, HapFea$parameter, paired = TRUE)
HapSad <- PH2 %>% filter(Emo == "hap" | Emo == "sad") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_HapSad <- t_to_d(HapSad$statistic, HapSad$parameter, paired = TRUE)
PleFea <- PH2 %>% filter(Emo == "ple" | Emo == "fea") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_PleFea <- t_to_d(PleFea$statistic, PleFea$parameter, paired = TRUE)
PleSad <- PH2 %>% filter(Emo == "ple" | Emo == "sad") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_PleSad <- t_to_d(PleSad$statistic, PleSad$parameter, paired = TRUE)
FeaSad <- PH2 %>% filter(Emo == "fea" | Emo == "sad") %>% t.test(data = ., ACC ~ Emo, paired=TRUE)
d_FeaSad <- t_to_d(FeaSad$statistic, FeaSad$parameter, paired = TRUE)
#add descriptions for output:
info <- c("Hap vs Ple", "Hap vs Fea", "Hap vs Sad", "Ple vs Fea", "Ple vs Sad", "Fea vs Sad",  "Descriptive Data")
# save output to textfile
capture.output(info[1], HapPle, d_HapPle, info[2],HapFea, d_HapFea, info[3], HapSad, d_HapSad, info[4], PleFea, d_PleFea, info[5], PleSad, d_PleSad, info[6], FeaSad, d_FeaSad, info[7], as.matrix(PH2_descriptive),
file="output/emotion_classification/amateurs_A_PH2_ME_Emo.txt")
#remove objects to keep environment tidy
rm(info, HapPle, HapFea, HapSad, PleFea, PleSad, FeaSad,PH2_descriptive, PH2,
d_HapPle, d_HapFea, d_HapSad, d_PleFea, d_PleSad, d_FeaSad)
#reaggreate dataset
PH3 <- D %>% group_by(Subject, MType) %>% summarise(ACC=mean(ACC))
#extract descriptive data
PH3_descriptive <- mySummary(PH3, ACC, MType)
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/3 = .0167
F0Tbr   <- PH3 %>% filter(MType == "f0" | MType == "tbr") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Tbr <- t_to_d(F0Tbr$statistic, F0Tbr$parameter, paired = TRUE)
TbrFull <- PH3 %>% filter(MType == "tbr" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_TbrFull <- t_to_d(TbrFull$statistic, TbrFull$parameter, paired = TRUE)
F0Full  <- PH3 %>% filter(MType == "f0" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Full <- t_to_d(F0Full$statistic, F0Full$parameter, paired = TRUE)
#add descriptions for output:
info <- c("F0 vs Tbr","Tbr vs Full"," F0 vs Full","Descriptive Data")
# save output to textfile
capture.output(info[1], F0Tbr, d_F0Tbr, info[2],TbrFull, d_TbrFull, info[3], F0Full, d_F0Full, info[4], as.matrix(PH3_descriptive),
file="output/emotion_classification/amateurs_A_PH3_ME_MType.txt")
#remove objects to keep environment tidy
rm(info, F0Tbr,TbrFull, F0Full, PH3_descriptive, PH3, d_F0Tbr, d_TbrFull, d_F0Full)
#reaggreate dataset
PH4 <- D %>% group_by(Subject, MType, Group) %>% summarise(ACC=mean(ACC))
#extract descriptive data
PH4_descriptive <- mySummary(PH4, ACC, MType, Group)
# perform pairwise t-tests
Tbr   <- PH4 %>% filter(MType == "tbr") %>% t.test(data = ., ACC ~ Group, paired=FALSE)
d_Tbr <- t_to_d(Tbr$statistic, Tbr$parameter, paired = FALSE)
F0 <- PH4 %>% filter(MType == "f0") %>% t.test(data = ., ACC ~ Group, paired=FALSE)
d_F0 <- t_to_d(F0$statistic, F0$parameter, paired = FALSE)
Full  <- PH4 %>% filter(MType == "full") %>% t.test(data = ., ACC ~ Group, paired=FALSE)
d_Full <- t_to_d(Full$statistic, Full$parameter, paired = FALSE)
#add descriptions for output:
info <- c("Tbr","F0","Full","Descriptive Data")
# save output to textfile
capture.output(info[1],Tbr, d_Tbr, info[2],F0, d_F0, info[3], Full, d_Full, info[4], as.matrix(PH4_descriptive),
file="output/emotion_classification/amateurs_A_PH4_Int_MType_Group.txt")
#remove objects to keep environment tidy
rm(info, Tbr,F0, Full, PH4_descriptive, d_F0, d_Full, d_Tbr)
rm(PH4)
#reaggreate dataset
PH5 <- D %>% group_by(Subject, Emo, MType) %>% summarise(ACC=mean(ACC))
#extract descriptive data
PH5_descriptive <- mySummary(PH5, ACC, Emo, MType)
PH5_descriptive
capture.output(as.matrix(PH5_descriptive),
file = "output/emotion_classification/amateurs_A_PH5_Int_emo_MType_descriptive_data.txt")
PH5hap <- PH5 %>% filter(Emo == "hap")
#####################
###### ANOVA ########
# data = PH5hap
# dv = ACC
# wid = Subject
# within = MType
ANOVAModel<-ezANOVA(data=PH5hap, wid=Subject, dv=ACC, within= MType, type =3, detailed=TRUE)
hap = tracedEzOut(ANOVAModel, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/3 = .0167
F0Tbr   <- PH5hap %>% filter(MType == "f0" | MType == "tbr") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Tbr <- t_to_d(F0Tbr$statistic, F0Tbr$parameter, paired = TRUE)
TbrFull <- PH5hap %>% filter(MType == "tbr" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_TbrFull <- t_to_d(TbrFull$statistic, TbrFull$parameter, paired = TRUE)
F0Full  <- PH5hap %>% filter(MType == "f0" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Full <- t_to_d(F0Full$statistic, F0Full$parameter, paired = TRUE)
#add descriptions for output:
info <- c("ANOVA on MType for happy stimuli only","F0 vs Tbr","Tbr vs Full"," F0 vs Full")
# save output to textfile
capture.output(info[1], hap, info[2], F0Tbr, d_F0Tbr, info[3],TbrFull, d_TbrFull, info[4], F0Full, d_F0Full,
file="output/emotion_classification/amateurs_A_PH5_Int_aEmo_aMType_hap.txt")
#remove objects to keep environment tidy
rm(info,hap, F0Tbr,TbrFull, F0Full, d_F0Tbr, d_TbrFull, d_F0Full, PH5hap)
PH5ple <- PH5 %>% filter(Emo == "ple")
#####################
###### ANOVA ########
# data = PH5ple
# dv = ACC
# wid = Subject
# within = MType
ANOVAModel<-ezANOVA(data=PH5ple, wid=Subject, dv=ACC, within= MType, type=3, detailed=TRUE)
ple = tracedEzOut(ANOVAModel, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/3 = .0167
F0Tbr   <- PH5ple %>% filter(MType == "f0" | MType == "tbr") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Tbr <- t_to_d(F0Tbr$statistic, F0Tbr$parameter, paired = TRUE)
TbrFull <- PH5ple %>% filter(MType == "tbr" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_TbrFull <- t_to_d(TbrFull$statistic, TbrFull$parameter, paired = TRUE)
F0Full  <- PH5ple %>% filter(MType == "f0" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Full <- t_to_d(F0Full$statistic, F0Full$parameter, paired = TRUE)
#add descriptions for output:
info <- c("ANOVA on MType for pleasure stimuli only","F0 vs Tbr","Tbr vs Full"," F0 vs Full")
# save output to textfile
capture.output(info[1], ple, info[2], F0Tbr, d_F0Tbr, info[3],TbrFull, d_TbrFull, info[4], F0Full, d_F0Full,
file="output/emotion_classification/amateurs_A_PH5_Int_aEmo_aMType_ple.txt")
#remove objects to keep environment tidy
rm(info,ple, F0Tbr,TbrFull, F0Full, d_F0Tbr, d_TbrFull, d_F0Full, PH5ple)
PH5fea <- PH5 %>% filter(Emo == "fea")
#####################
###### ANOVA ########
# data = PH5fea
# dv = ACC
# wid = Subject
# within = MType
ANOVAModel<-ezANOVA(data=PH5fea, wid=Subject, dv=ACC, within= MType, type=3, detailed=TRUE)
fea = tracedEzOut(ANOVAModel, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/3 = .0167
F0Tbr   <- PH5fea %>% filter(MType == "f0" | MType == "tbr") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Tbr <- t_to_d(F0Tbr$statistic, F0Tbr$parameter, paired = TRUE)
TbrFull <- PH5fea %>% filter(MType == "tbr" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_TbrFull <- t_to_d(TbrFull$statistic, TbrFull$parameter, paired = TRUE)
F0Full  <- PH5fea %>% filter(MType == "f0" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Full <- t_to_d(F0Full$statistic, F0Full$parameter, paired = TRUE)
#add descriptions for output:
info <- c("ANOVA on MType for fea stimuli only","F0 vs Tbr","Tbr vs Full"," F0 vs Full")
# save output to textfile
capture.output(info[1], fea, info[2], F0Tbr, d_F0Tbr, info[3],TbrFull, d_TbrFull, info[4], F0Full, d_F0Full,
file="output/emotion_classification/amateurs_A_PH5_Int_aEmo_aMType_fea.txt")
#remove objects to keep environment tidy
rm(info,fea, F0Tbr,TbrFull, F0Full, d_F0Tbr, d_TbrFull, d_F0Full, PH5fea)
PH5sad <- PH5 %>% filter(Emo == "sad")
#####################
###### ANOVA ########
# data = PH5sad
# dv = ACC
# wid = Subject
# within = MType
ANOVAModel<-ezANOVA(data=PH5sad, wid=Subject, dv=ACC, within= MType, type=3, detailed=TRUE)
sad = tracedEzOut(ANOVAModel, print = TRUE, sph.cor = "HF", mau.p = 0.05, etasq = "partial", dfsep = ", ")
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/3 = .0167
F0Tbr   <- PH5sad %>% filter(MType == "f0" | MType == "tbr") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Tbr <- t_to_d(F0Tbr$statistic, F0Tbr$parameter, paired = TRUE)
TbrFull <- PH5sad %>% filter(MType == "tbr" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_TbrFull <- t_to_d(TbrFull$statistic, TbrFull$parameter, paired = TRUE)
F0Full  <- PH5sad %>% filter(MType == "f0" | MType == "full") %>% t.test(data = ., ACC ~ MType, paired=TRUE)
d_F0Full <- t_to_d(F0Full$statistic, F0Full$parameter, paired = TRUE)
#add descriptions for output:
info <- c("ANOVA on MType for sad stimuli only","F0 vs Tbr","Tbr vs Full"," F0 vs Full")
# save output to textfile
capture.output(info[1], sad, info[2], F0Tbr, d_F0Tbr, info[3],TbrFull, d_TbrFull, info[4], F0Full, d_F0Full,
file="output/emotion_classification/amateurs_A_PH5_Int_aEmo_aMType_sad.txt")
#remove objects to keep environment tidy
rm(info,sad, F0Tbr,TbrFull, F0Full, d_F0Tbr, d_TbrFull, d_F0Full, PH5sad)
PH5 <- PH5 %>% pivot_wider(names_from = c("MType"), values_from = c("ACC"))
PH5$Diff <- PH5$f0 - PH5$tbr
#extract descriptive data
PH5_descriptive <- mySummary(PH5, Diff, Emo)
# perform pairwise t-tests, Bonferroni-corrected a-level: .05/6 = .008
HapPle <- PH5 %>% filter(Emo == "hap" | Emo == "ple") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_HapPle <- t_to_d(HapPle$statistic, HapPle$parameter, paired = TRUE)
HapFea <- PH5 %>% filter(Emo == "hap" | Emo == "fea") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_HapFea <- t_to_d(HapFea$statistic, HapFea$parameter, paired = TRUE)
HapSad <- PH5 %>% filter(Emo == "hap" | Emo == "sad") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_HapSad <- t_to_d(HapSad$statistic, HapSad$parameter, paired = TRUE)
PleFea <- PH5 %>% filter(Emo == "ple" | Emo == "fea") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_PleFea <- t_to_d(PleFea$statistic, PleFea$parameter, paired = TRUE)
PleSad <- PH5 %>% filter(Emo == "ple" | Emo == "sad") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_PleSad <- t_to_d(PleSad$statistic, PleSad$parameter, paired = TRUE)
FeaSad <- PH5 %>% filter(Emo == "fea" | Emo == "sad") %>% t.test(data = ., Diff ~ Emo, paired=TRUE)
d_FeaSad <- t_to_d(FeaSad$statistic, FeaSad$parameter, paired = TRUE)
#add descriptions for output:
info <- c("Hap vs Ple", "Hap vs Fea", "Hap vs Sad", "Ple vs Fea", "Ple vs Sad", "Fea vs Sad",  "Descriptive Data")
# save output to textfile
capture.output(info[1], HapPle, d_HapPle, info[2],HapFea, d_HapFea, info[3], HapSad, d_HapSad, info[4], PleFea, d_PleFea, info[5], PleSad, d_PleSad, info[6], FeaSad, d_FeaSad, info[7], as.matrix(PH5_descriptive),
file="output/emotion_classification/amateurs_A_PH5_Diff_F0-Tbr.txt")
#remove objects to keep environment tidy
rm(info, HapPle, HapFea, HapSad, PleFea, PleSad, FeaSad,PH5_descriptive, PH5,
d_HapPle, d_HapFea, d_HapSad, d_PleFea, d_PleSad, d_FeaSad)
rm(ANOVAModel, D)
