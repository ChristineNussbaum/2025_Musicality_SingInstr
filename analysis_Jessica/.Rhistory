survey$Instrument2 <- survey$Instrument
survey$Instrument2[survey$Instrument2 == "Geige"] <- "Violine"
survey$Instrument2[survey$Instrument2 == "Chor"] <- "Gesang"
survey$Instrument2[survey$Instrument2 == "gesang"] <- "Gesang"
survey$Instrument2[survey$Instrument2 == "Gesang, Blockflöte, Saxophon"] <- "Gesang"
survey$Instrument2[survey$Instrument2 == "Ich spiele seit 13 Jahren Klavier und singe im Chor und kann nicht sagen was ich besser kann"] <- "Gesang"
survey$Instrument2[survey$Instrument2 == "Cello, Gesang"] <- "Cello"
survey$Instrument2[survey$Instrument2 == "Trompete (Gesang fast gleichermaßen)"] <- "Trompete"
View(survey)
# remove participants who omitted >5% of trials
survey <- subset(survey, Code!="SCS58E") # singer, ecd4a2cb
survey <- subset(survey, Code!="EHM92A") # singer, c7e7e936
# remove participants who reported faulty audio-files
survey <- subset(survey, Code!="AIG27E") # instrumentalist
survey <- subset(survey, Code!="IHP42U") # singer
# remove participant who sings in choir and an instrument in a band
survey <- subset(survey, Code!="NIR46E")
paste("There are currently", length(unique(survey$Code)), "datasets loaded.")
# correct Group assignment for one participant (AEM51L)
survey$Group[survey$Code == "AEM51L"] <- 1
# process amateurs down to relevant variables
survey2 <- survey[,c(1,2,4,46,9,5,6:8,16:18,20,47,22:28,29:33,34:38,44,48:51,63,64,65:67,68)]
View(survey2)
order(c(1,2,4,46,9,5,6:8,16:18,20,47,22:28,29:33,34:38,44,48:51,63,64,65:67,68))
# process amateurs down to relevant variables
survey2 <- survey[,c(1:7,46,47,14,16:18,20, 22:28,29:33,34:38,44,48:51,63,64,65:67,68)]
View(survey2)
View(survey2)
# process amateurs down to relevant variables
survey <- survey[,c(1:7,46,47,14,16:18,20, 22:28,29:33,34:38,44,48:51,63,64,65:67,68)]
save(survey, file="input/amateurs_survey_processed.RData")
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)  # version 1.3.1
library(effectsize) # version 0.4.5
# load helpful functions
source("functions/mySummary.R")
# load the data of the survey and questionnaires that were collected before and after the classification experiment
load(file="input/amateurs_survey_processed.RData")
# remove participant with a Degree in Music Science
survey <- subset (survey2, Code!="AEB56L") # instrumentalist
table(survey$Group)
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)  # version 1.3.1
library(effectsize) # version 0.4.5
# load helpful functions
source("functions/mySummary.R")
# load the data of the survey and questionnaires that were collected before and after the classification experiment
load(file="input/amateurs_survey_processed.RData")
# remove participant with a Degree in Music Science
survey <- subset (survey2, Code!="AEB56L") # instrumentalist
# remove participant with a Degree in Music Science
survey <- subset (survey2, Code!="AEB56L") # instrumentalist
# remove participant with a Degree in Music Science
survey <- subset (survey2, Code!="AEB56L") # instrumentalist
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse)  # version 1.3.1
library(effectsize) # version 0.4.5
# load helpful functions
source("functions/mySummary.R")
# load the data of the survey and questionnaires that were collected before and after the classification experiment
load(file="input/amateurs_survey_processed.RData")
# remove participant with a Degree in Music Science
survey <- subset (survey2, Code!="AEB56L") # instrumentalist
# remove participant with a Degree in Music Science
survey <- subset (survey, Code!="AEB56L") # instrumentalist
table(Sample$Chor, Sample$Orchester, Sample)
table(survey$Group)
names(survey)
View(survey)
# Age
Age <- mySummary(survey, Age, Group)
range <- survey %>% group_by(Group) %>% summarise(range(Age))
#Age
age_diff <- t.test(data = survey, Age ~ Group, paired =  FALSE)
d_age_diff <- t_to_d(age_diff$statistic, age_diff$parameter, paired = FALSE)
# capture output:
capture.output(as.matrix(Age), as.matrix(range), age_diff, d_age_diff,
file="output/sample_description/age.txt")
rm(Age, range, age_diff, d_age_diff)
## other demographics
sex <- table(survey$Group, survey$LSex)
language <- table(survey$Group, survey$LMotherLanguage)
profession <- table(survey$LProfession)
hearingImp <- table(survey$Group, survey$LHearingImp)
hearingImp2 <- table(survey$Group, survey$LHearingImp2)
hearingImp3 <- table(survey$Group, survey$LHearingImp3)
duration <- survey %>% filter(TimeTotal < 999) %>%  group_by(Group) %>% summarise(Dur = mean(TimeTotal))
info <- c("Sex", "Language", "Profession", "HearingImpairment", "HearinImpairment2", "HearingImpairment3", "Duration")
capture.output(info[1], sex, info[2], language, info[3], profession,
info[4], hearingImp, info[5], hearingImp2, info[6],
hearingImp3, info[7], as.matrix(duration),
file="output/sample_description/demographics.txt")
rm(sex, language, profession, hearingImp, hearingImp2, hearingImp3, duration)
# descriptive_data
AQ_summary <- survey %>% group_by(Group) %>% summarise(AQ_Tot = mean(AQ_Total),   # AQ Total
AQ_TotSD = sd(AQ_Total),
AQ_Soc = mean(AQ_Social),  # AQ Social
AQ_SocSD = sd(AQ_Social),
AQ_Att = mean(AQ_AttentionToDetails), # AQ Attention to Detail
AQ_AttSD = sd(AQ_AttentionToDetails),
AQ_SocSkills = mean(AQ_SocialSkills), # AQ Social Skills
AQ_SocSkillsSD = sd(AQ_SocialSkills),
AQ_Com = mean(AQ_Communication),    # AQ Communication
AQ_ComSD = sd(AQ_Communication),
AQ_Imag = mean(AQ_Imagination),     # AQ Imagination
AQ_ImagSD = sd(AQ_Imagination),
AQ_AttSwitch = mean(AQ_AttentionSwitching), #AQ Attention Switching
AQ_AttSwitchSD = sd(AQ_AttentionSwitching))
#AQ TTest
AQ_total <- t.test(data = survey, AQ_Total ~ Group, paired =  FALSE)
d_AQ_total <- t_to_d(AQ_total$statistic, AQ_total$parameter, paired = FALSE)
AQ_ATT <- t.test(data = survey, AQ_AttentionToDetails ~ Group, paired =  FALSE)
d_AQ_ATT <- t_to_d(AQ_ATT$statistic, AQ_ATT$parameter, paired = FALSE)
AQ_Social <- t.test(data = survey, AQ_Social ~ Group, paired =  FALSE)
d_AQ_Social <- t_to_d(AQ_Social$statistic, AQ_Social$parameter, paired = FALSE)
AQ_SocSkills <- t.test(data = survey, AQ_SocialSkills ~ Group, paired =  FALSE)
d_AQ_SocSkills <- t_to_d(AQ_SocSkills$statistic, AQ_SocSkills$parameter, paired = FALSE)
AQ_Com <- t.test(data = survey, AQ_Communication ~ Group, paired =  FALSE)
d_AQ_Com <- t_to_d(AQ_Com$statistic, AQ_Com$parameter, paired = FALSE)
AQ_Imag <- t.test(data = survey, AQ_Imagination ~ Group, paired =  FALSE)
d_AQ_Imag <- t_to_d(AQ_Imag$statistic, AQ_Imag$parameter, paired = FALSE)
AQ_AttSwitch <- t.test(data = survey, AQ_AttentionSwitching ~ Group, paired =  FALSE)
d_AQ_AttSwitch <- t_to_d(AQ_AttSwitch$statistic, AQ_AttSwitch$parameter, paired = FALSE)
capture.output(as.matrix(AQ_summary), AQ_total, d_AQ_total, AQ_ATT, d_AQ_ATT,  AQ_Social, d_AQ_Social,
AQ_SocSkills, d_AQ_SocSkills, AQ_Com, d_AQ_Com, AQ_Imag, d_AQ_Imag, AQ_AttSwitch, d_AQ_AttSwitch, file="output/sample_description/AQ.txt")
rm(AQ_summary, AQ_total, AQ_ATT, AQ_Social,  d_AQ_total,  d_AQ_ATT, d_AQ_Social, AQ_SocSkills, d_AQ_SocSkills, AQ_Com, d_AQ_Com, AQ_Imag, d_AQ_Imag, AQ_AttSwitch, d_AQ_AttSwitch)
#------------------------------------------------------------------------------------------------------------------#
#                                           PANAS                                                                #
#------------------------------------------------------------------------------------------------------------------#
# descriptive_data
PANAS <- survey %>% group_by(Group) %>% summarise(Neg = mean(neg_Aff),
NegSD = sd(neg_Aff),
Pos = mean(pos_Aff),
PosSD = sd(pos_Aff))
#PANAS
Neg <- t.test(data = survey, neg_Aff ~ Group, paired =  FALSE)
d_Neg <- t_to_d(Neg$statistic, Neg$parameter, paired = FALSE)
Pos <- t.test(data = survey, pos_Aff ~ Group, paired =  FALSE)
d_Pos <- t_to_d(Pos$statistic, Pos$parameter, paired = FALSE)
capture.output(as.matrix(PANAS), Neg, d_Neg, Pos, d_Pos, file="output/sample_description/PANAS.txt")
rm(PANAS, Neg, Pos, d_Neg, d_Pos)
#------------------------------------------------------------------------------------------------------------------#
#                                           SES                                                               #
#------------------------------------------------------------------------------------------------------------------#
#Einkommen (Income)
Einkommen <- chisq.test(survey$Group, survey$Einkommen)
#Schulabschluss (Education)
Schulabschluss <- chisq.test(survey$Group, survey$Schulabschluss)
#Ausbildung (Degree)
Ausbildung <- chisq.test(survey$Group, survey$Ausbildung)
capture.output(Einkommen, table(survey$Einkommen, survey$Group),  Schulabschluss, table(survey$Schulabschluss,survey$Group), Ausbildung, table(survey$Ausbildung, survey$Group), file="output/sample_description/SES.txt")
rm(Schulabschluss, Einkommen, Ausbildung)
#------------------------------------------------------------------------------------------------------------------#
#                                           GOLD MSI                                                               #
#------------------------------------------------------------------------------------------------------------------#
# descriptive_data
MSI_summary <- survey %>% group_by(Group) %>% summarise(ME = mean(ME_mean),
ME_SD = sd(ME_mean),
Active = mean(Mean_active),
Active_SD = sd(Mean_active),
Education = mean(Mean_education),
Education_SD = sd(Mean_education),
Emotion = mean(Mean_emotion),
Emotion_SD = sd(Mean_emotion),
Singing = mean(Mean_singing),
Singing_SD = sd(Mean_singing),
Perception = mean(Mean_perception),
Perception_SD = sd(Mean_perception))
#GOLD-MSI
ME <- t.test(data = survey, ME_mean ~ Group, paired =  FALSE)
d_ME <- t_to_d(ME$statistic, ME$parameter, paired = FALSE)
Active <- t.test(data = survey, Mean_active ~ Group, paired =  FALSE)
d_Active <- t_to_d(Active$statistic, Active$parameter, paired = FALSE)
Education <- t.test(data = survey, Mean_education ~ Group, paired =  FALSE)
d_Education <- t_to_d(Education$statistic, Education$parameter, paired = FALSE)
Emotion <- t.test(data = survey, Mean_emotion ~ Group, paired =  FALSE)
d_Emotion <- t_to_d(Emotion$statistic, Emotion$parameter, paired = FALSE)
Singing <- t.test(data = survey, Mean_singing ~ Group, paired =  FALSE)
d_Singing <- t_to_d(Singing$statistic, Singing$parameter, paired = FALSE)
Perception <- t.test(data = survey, Mean_perception ~ Group, paired =  FALSE)
d_Perception <- t_to_d(Perception$statistic, Perception$parameter, paired = FALSE)
capture.output(as.matrix(MSI_summary), ME, d_ME, Active, d_Active, Education, d_Education, Emotion, d_Emotion, Singing, d_Singing, Perception, d_Perception, file="output/musicality/Gold-MSI.txt")
rm(MSI_summary, ME, Active, Education, Emotion, Singing, Perception, d_ME, d_Active, d_Education, d_Emotion, d_Singing, d_Perception)
#------------------------------------------------------------------------------------------------------------------#
#                                           OCEAN                                                               #
#------------------------------------------------------------------------------------------------------------------#
# descriptive_data
OCEAN <- survey %>% group_by(Group) %>% summarise(o = round(mean(O), 2),
O_SD = round(sd(O), 2),
c = round(mean(C), 2),
C_SD = round(sd(C), 2),
e = round(mean(E), 2),
E_SD = round(sd(E), 2),
a = round(mean(A), 2),
A_SD = round(sd(A), 2),
n = round(mean(N), 2),
N_SD = round(sd(N), 2))
#OCEAN
O = t.test(data = survey, O ~ Group, paired =  FALSE)
d_O <- t_to_d(O$statistic, O$parameter, paired = FALSE)
C = t.test(data = survey, C ~ Group, paired =  FALSE)
d_C <- t_to_d(C$statistic, C$parameter, paired = FALSE)
E = t.test(data = survey, E ~ Group, paired =  FALSE)
d_E <- t_to_d(E$statistic, E$parameter, paired = FALSE)
A = t.test(data = survey, A ~ Group, paired =  FALSE)
d_A <- t_to_d(A$statistic, A$parameter, paired = FALSE)
N = t.test(data = survey, N ~ Group, paired =  FALSE)
d_N <- t_to_d(N$statistic, N$parameter, paired = FALSE)
capture.output(as.matrix(OCEAN), O,d_O, C, d_C, E, d_E, A, d_A, N, d_N, file="output/sample_description/OCEAN.txt")
rm(OCEAN, O,C,E,A,N, d_O, d_C, d_E, d_A, d_N)
## singers only
singers <- survey %>% filter(Group =="1")
#fix age column
singers$AgeTraining <- ifelse(is.na(singers$AgeTraining), 0, singers$AgeTraining)
AgeTrainingAll<- table(singers$AgeTraining)
TrainingSing <- singers %>% filter(AgeTraining > 0)
#Age at onset of training
AgeTrainingSubSet<- mySummary(TrainingSing, AgeTraining)
Range <- range(TrainingSing$AgeTraining)
capture.output(as.matrix(AgeTrainingAll), as.matrix(AgeTrainingSubSet), Range, file= "output/sample_description/Singers_onsetAge.txt")
# years of musical training
yearsTraining<- table(singers$YearsTraining)
capture.output(as.matrix(yearsTraining), file= "output/sample_description/Singers_yearsTraining.txt")
rm(AgeTrainingAll, AgeTrainingSubSet, Range, yearsTraining)
#which Instruments:
Instruments <- as.data.frame(table(singers$Instrument2))
capture.output(as.matrix(Instruments), file = "output/sample_description/Singers_Instruments.txt")
rm(Instruments, TrainingSing)
rm(singers)
## instrumentalists only
instrumentalists <- survey %>% filter(Group =="2")
#fix the AgeTraining column
instrumentalists$AgeTraining <- ifelse(is.na(instrumentalists$AgeTraining), 0, instrumentalists$AgeTraining)
AgeTrainingAll<- table(instrumentalists$AgeTraining)
TrainingInstr <- instrumentalists %>% filter(AgeTraining > 0)
#Age at onset of training
AgeTrainingSubSet<- mySummary(TrainingInstr, AgeTraining)
Range <- range(TrainingInstr$AgeTraining)
capture.output(as.matrix(AgeTrainingAll), as.matrix(AgeTrainingSubSet), Range, file= "output/sample_description/Instrumentalists_onsetAge.txt")
# years of musical training
yearsTraining<- table(instrumentalists$YearsTraining)
capture.output(as.matrix(yearsTraining), file= "output/sample_description/Instrumentalists_yearsTraining.txt")
rm(AgeTrainingAll, AgeTrainingSubSet, Range, yearsTraining)
#which Instruments:
Instruments <- as.data.frame(table(instrumentalists$Instrument2))
capture.output(as.matrix(Instruments), file = "output/sample_description/Instrumentalists_Instruments.txt")
rm(Instruments, TrainingInstr)
rm(instrumentalists)
35+1+3+4
4+2+4+4+2+7+2+1+2+1+3+1+1+1
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999) # supresses the e^-notation
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
View(D)
#NOT PUBLISHED
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#                             emotion classification task
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/emo_exp/")
#D <- read.delim(file="input/emo_parameters.data.2021-07-15--10-43.txt", sep = " ", header = FALSE)
names(D) <- c("SpId", "Emo","Word",  "MType", "SpSex", "filename", "CB", "ACC", "Resp", "RT", "Block", "TrialNo", "Experiment", "Date", "Subject")
# practise-Trials raus
D <- D %>% filter(Block != "practise")
# check if all stimuli are here
length(unique(D$filename))
table(D$Subject)
D$ACC <- ifelse(D$ACC == 1, 1,0)
# save prepared dataset:
save(D, file="input/Exp_raw.RData")
#--------------------------------------------------------------------------------
### Processing for further analyses
## Analysis of missings
missings <- D %>% filter(RT >= 5000) # omission, RT-cutoff was 5000ms
missings_n <- missings %>% group_by(Subject) %>% summarise(n = length(Experiment))
#-> Missing criterion is 5% (= 15.6 trials of 312), so two participants have to be removed (c7e7e936 and ecd4a2cb)
to_be_removed <- missings_n$Subject[missings_n$n > 15]
#remove these participants from the dataset:
D <- D %>% filter(!(D$Subject  %in% to_be_removed))
missings_n <- missings_n %>% filter(!(Subject  %in% to_be_removed))
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
#save summary information about trials of omission:
missings_n$percent <- missings_n$n /312
missings_info <- mySummary(missings_n, percent)
capture.output(missings_info, file="output/amateurs_omissions_summary.txt")
rm(missings_info, missings_n, missings)
#save information about the removed participants:
save(to_be_removed, file ="input/amateurs_to_be_removed.RData")
#remove trials of omission from the dataset:
#D <- D %>% filter(RT < 5000)
## Removing data with faulty audio
# remove participants with faulty audio-files
D <- subset(D, Subject!="08eba336") # instrumentalist AIG27E
D <- subset(D, Subject!="27e3b37a") # singer IHP42U
#ecd4a2cb (Subject SCS58E) also reported faulty audio-files, but is already removed because of omitting >5% of trials
# remove participant who is both in a choir and a band
D <- subset(D, Subject!="a67e3eb6") #NIR46E
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
relPathDirFile = "input/survey/data.csv"
Raw <- read.csv(relPathDirFile, header= TRUE, sep = ",", row.names = NULL)
#fix  colnames
cols <- names(Raw)
names(Raw) <-cols[1:189]
Raw <- Raw[,1:189]
#fix single participant who closed the window too fast and has no time_end
Raw$TIME_end[Raw$TIME_start == "2024-01-24-18-23"] <- "2024-01-24-19-38"
Raw$TIME_total[Raw$TIME_start == "2024-01-24-18-23"] <- 75
#remove all incompleted datasets (they dont have time_end)
Raw <- Raw %>% filter(!is.na(Raw$TIME_total))
# remove test dataset (ENH59A)
Raw <- subset(Raw, intro_question1_1!="1062023")
N <- length(Raw$participant)
Raw$VPN <- paste0("VPN_",c(1:N))
#extract participant and Code
Raw$participant <- str_sub(Raw$participant , 31, 38)
Raw$Partcode <- paste0(Raw$LPartCode_1, Raw$LPartCode_2, Raw$LPartCode_3, Raw$LPartCode_4, Raw$LPartCode_5, Raw$LPartCode_6)
#remove irrelevant variables
Raw <- Raw[ , -c(180:185)]
nSubs <- length(unique(Raw$participant))
print(paste("loaded data from", nSubs, "participants", sep=" "))
#isolate relevant variables (Subject, Group, Code)
Sample <- Raw[, c(1,185,7)]
names(Sample) <- c("Subject", "Code", "Group")
Sample$Code <-toupper(Sample$Code)  # make code uppercase
## merge exp data with relevant survey data
D2 <- merge(D, Sample)
View(D2)
# correct Group assignment for one participant (AEM51L)
D2$Group[D2$Code == "AEM51L"] <- 1
#tidy up so it matches data set from professionals/nonmusicians
D <- D2[,c(1,16,17,2:11)]
save(D, file="input/amateurs_Exp_processed.RData")
rm(D,Raw)
##########################################################################
## File: 04a_emotion_classification_data_analysis_amateurs.R
## This script analysis the emotion classification performance of musicians and non-musicians
# authors: Christine Nussbaum (christine.nussbaum@uni-jena.de), Jessica Senftleben
# date 10/2022, 02/2024
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(tidyverse) # version 1.3.1
library(ez) # version 4.4-0
library(effectsize) # 0.4.5
# load relevant functions
source("functions/tracedEZout.R")
source("functions/mySummary.R")
# set some relevant setting
options(scipen = 999) # supresses the e^-notation
#---------------------------------------------------------------------------------
#get the preprocessed data:
#Experiment data (after some preprocessing, e.g. removing participants with too many omissions)
load(file="input/amateurs_Exp_processed.RData")
#remove participant with a Degree in Music Science
D <- subset (D, Code!="AEB56L") # instrumentalist
View(D)
##########################################################################
## File: 01a_data_preparation_exp_proms.R.R
## Data Preparation for the Online Experiment Data and Proms Data
# authors: Christine Nussbaum, Jessica Senftleben
# date 07/2021
#NOT PUBLISHED
# clear directory
rm(list=ls())
# set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library("tidyverse")
# load relevant functions
source("functions/loadPTKExperimentData.R")
source("functions/mySummary.R")
#---------------------------------------------------------------------------------
#                             emotion classification task
#---------------------------------------------------------------------------------
#get the raw data:
D <- loadPTKExperimentData(relDirPath = "input/emo_exp/")
#D <- read.delim(file="input/emo_parameters.data.2021-07-15--10-43.txt", sep = " ", header = FALSE)
names(D) <- c("SpId", "Emo","Word",  "MType", "SpSex", "filename", "CB", "ACC", "Resp", "RT", "Block", "TrialNo", "Experiment", "Date", "Subject")
# practise-Trials raus
D <- D %>% filter(Block != "practise")
# check if all stimuli are here
length(unique(D$filename))
table(D$Subject)
D$ACC <- ifelse(D$ACC == 1, 1,0)
# save prepared dataset:
save(D, file="input/Exp_raw.RData")
#--------------------------------------------------------------------------------
### Processing for further analyses
## Analysis of missings
missings <- D %>% filter(RT >= 5000) # omission, RT-cutoff was 5000ms
missings_n <- missings %>% group_by(Subject) %>% summarise(n = length(Experiment))
#-> Missing criterion is 5% (= 15.6 trials of 312), so two participants have to be removed (c7e7e936 and ecd4a2cb)
to_be_removed <- missings_n$Subject[missings_n$n > 15]
#remove these participants from the dataset:
D <- D %>% filter(!(D$Subject  %in% to_be_removed))
missings_n <- missings_n %>% filter(!(Subject  %in% to_be_removed))
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
#save summary information about trials of omission:
missings_n$percent <- missings_n$n /312
missings_info <- mySummary(missings_n, percent)
capture.output(missings_info, file="output/amateurs_omissions_summary.txt")
rm(missings_info, missings_n, missings)
#save information about the removed participants:
save(to_be_removed, file ="input/amateurs_to_be_removed.RData")
#remove trials of omission from the dataset:
#D <- D %>% filter(RT < 5000)
## Removing data with faulty audio
# remove participants with faulty audio-files
D <- subset(D, Subject!="08eba336") # instrumentalist AIG27E
D <- subset(D, Subject!="27e3b37a") # singer IHP42U
#ecd4a2cb (Subject SCS58E) also reported faulty audio-files, but is already removed because of omitting >5% of trials
# remove participant who is both in a choir and a band
D <- subset(D, Subject!="a67e3eb6") #NIR46E
paste("There are currently", length(unique(D$Subject)), "datasets loaded.")
## merge with relevant data from survey (Group, Code)
# set path to survey data
relPathDirFile = "input/survey/data.csv"
Raw <- read.csv(relPathDirFile, header= TRUE, sep = ",", row.names = NULL)
#fix  colnames
cols <- names(Raw)
names(Raw) <-cols[1:189]
Raw <- Raw[,1:189]
#fix single participant who closed the window too fast and has no time_end
Raw$TIME_end[Raw$TIME_start == "2024-01-24-18-23"] <- "2024-01-24-19-38"
Raw$TIME_total[Raw$TIME_start == "2024-01-24-18-23"] <- 75
#remove all incompleted datasets (they dont have time_end)
Raw <- Raw %>% filter(!is.na(Raw$TIME_total))
# remove test dataset (ENH59A)
Raw <- subset(Raw, intro_question1_1!="1062023")
N <- length(Raw$participant)
Raw$VPN <- paste0("VPN_",c(1:N))
#extract participant and Code
Raw$participant <- str_sub(Raw$participant , 31, 38)
Raw$Partcode <- paste0(Raw$LPartCode_1, Raw$LPartCode_2, Raw$LPartCode_3, Raw$LPartCode_4, Raw$LPartCode_5, Raw$LPartCode_6)
#remove irrelevant variables
Raw <- Raw[ , -c(180:185)]
nSubs <- length(unique(Raw$participant))
print(paste("loaded data from", nSubs, "participants", sep=" "))
#isolate relevant variables (Subject, Group, Code)
Sample <- Raw[, c(1,185,7)]
names(Sample) <- c("Subject", "Code", "Group")
Sample$Code <-toupper(Sample$Code)  # make code uppercase
## merge exp data with relevant survey data
D2 <- merge(D, Sample)
# correct Group assignment for one participant (AEM51L)
D2$Group[D2$Code == "AEM51L"] <- 1
View(D2)
View(D2)
#tidy up so it matches data set from professionals/nonmusicians
D <- D2[,c(1,16,17,2:11)]
View(D)
save(D, file="input/amateurs_Exp_processed.RData")
save(D, file="input/amateurs_Exp_processed.RData")
# clear directory
rm(list=ls())
#set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load required packages
library(stringr)  # f?r datenaufbereitung
library(tidyverse)
# set path to survey data
relPathDirFile = "input/survey/data.csv"
Raw <- read.csv(relPathDirFile, header= TRUE, sep = ",", row.names = NULL)
#fix  colnames
cols <- names(Raw)
names(Raw) <-cols[1:189]
Raw <- Raw[,1:189]
#fix single participant who closed the window too fast and has no time_end
Raw$TIME_end[Raw$TIME_start == "2024-01-24-18-23"] <- "2024-01-24-19-38"
View(Raw)
Raw$TIME_total[Raw$TIME_start == "2024-01-24-18-23"] <- 75
#remove all incompleted datasets (they dont have time_end)
Raw <- Raw %>% filter(!is.na(Raw$TIME_total))
# remove test dataset (ENH59A)
Raw <- subset(Raw, intro_question1_1!="1062023")
